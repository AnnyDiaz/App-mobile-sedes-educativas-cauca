import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';

/// Servicio para manejar permisos de la aplicaci√≥n de forma centralizada
class PermissionService {
  /// Solicita permisos de almacenamiento para descargas
  /// Compatible con Android 11+ (API 30+)
  static Future<bool> requestStoragePermissions() async {
    if (!Platform.isAndroid) {
      return true; // iOS no requiere permisos especiales para descargas
    }

    try {
      // Verificar primero si ya tenemos permisos
      if (await hasStoragePermissions()) {
        print('‚úÖ Permisos de almacenamiento ya otorgados');
        return true;
      }

      print('üîê Solicitando permisos de almacenamiento...');
      
      // Primero intentar con permisos est√°ndar de almacenamiento
      final storageStatus = await Permission.storage.request();
      print('üì± Estado de permisos storage: ${storageStatus.toString()}');
      
      if (storageStatus.isGranted) {
        print('‚úÖ Permisos de storage otorgados');
        return true;
      }

      // Para Android 11+ (API 30+), intentar con manageExternalStorage
      if (await Permission.manageExternalStorage.isDenied) {
        print('üîê Solicitando permisos de manageExternalStorage...');
        final manageStatus = await Permission.manageExternalStorage.request();
        print('üì± Estado de permisos manageExternalStorage: ${manageStatus.toString()}');
        
        if (manageStatus.isGranted) {
          print('‚úÖ Permisos de manageExternalStorage otorgados');
          return true;
        }
      }

      print('‚ùå Permisos de almacenamiento denegados');
      return false;
    } catch (e) {
      print('‚ùå Error solicitando permisos de almacenamiento: $e');
      return false;
    }
  }

  /// Verifica si los permisos de almacenamiento est√°n otorgados
  static Future<bool> hasStoragePermissions() async {
    if (!Platform.isAndroid) {
      return true;
    }

    try {
      final storageStatus = await Permission.storage.status;
      print('üì± Estado actual de permisos storage: ${storageStatus.toString()}');
      
      if (storageStatus.isGranted) {
        print('‚úÖ Permisos de storage ya otorgados');
        return true;
      }

      final manageStatus = await Permission.manageExternalStorage.status;
      print('üì± Estado actual de permisos manageExternalStorage: ${manageStatus.toString()}');
      
      if (manageStatus.isGranted) {
        print('‚úÖ Permisos de manageExternalStorage ya otorgados');
        return true;
      }

      print('‚ùå No hay permisos de almacenamiento otorgados');
      return false;
    } catch (e) {
      print('‚ùå Error verificando permisos de almacenamiento: $e');
      return false;
    }
  }

  /// Muestra un di√°logo informativo sobre permisos de almacenamiento
  static Future<void> showStoragePermissionDialog(BuildContext context) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(Icons.storage, color: Colors.orange[600]),
              const SizedBox(width: 8),
              const Text('Permisos de Almacenamiento'),
            ],
          ),
          content: const Text(
            'Para descargar archivos, la aplicaci√≥n necesita acceso al almacenamiento del dispositivo.\n\n'
            'Por favor, habilita los permisos de almacenamiento en la configuraci√≥n de la aplicaci√≥n.',
            style: TextStyle(fontSize: 16),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancelar'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                openAppSettings();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue[600],
                foregroundColor: Colors.white,
              ),
              child: const Text('Ir a Configuraci√≥n'),
            ),
          ],
        );
      },
    );
  }

  /// Solicita permisos de ubicaci√≥n
  static Future<bool> requestLocationPermissions() async {
    try {
      final status = await Permission.location.request();
      return status.isGranted;
    } catch (e) {
      print('‚ùå Error solicitando permisos de ubicaci√≥n: $e');
      return false;
    }
  }

  /// Verifica si los permisos de ubicaci√≥n est√°n otorgados
  static Future<bool> hasLocationPermissions() async {
    try {
      final status = await Permission.location.status;
      return status.isGranted;
    } catch (e) {
      print('‚ùå Error verificando permisos de ubicaci√≥n: $e');
      return false;
    }
  }

  /// Solicita permisos de c√°mara
  static Future<bool> requestCameraPermissions() async {
    try {
      final status = await Permission.camera.request();
      return status.isGranted;
    } catch (e) {
      print('‚ùå Error solicitando permisos de c√°mara: $e');
      return false;
    }
  }

  /// Verifica si los permisos de c√°mara est√°n otorgados
  static Future<bool> hasCameraPermissions() async {
    try {
      final status = await Permission.camera.status;
      return status.isGranted;
    } catch (e) {
      print('‚ùå Error verificando permisos de c√°mara: $e');
      return false;
    }
  }

  /// Maneja la descarga con verificaci√≥n de permisos
  static Future<bool> handleDownloadWithPermissions(
    BuildContext context,
    Future<void> Function() downloadFunction,
  ) async {
    try {
      // Verificar permisos existentes
      if (await hasStoragePermissions()) {
        await downloadFunction();
        return true;
      }

      // Solicitar permisos si no est√°n otorgados
      final granted = await requestStoragePermissions();
      if (granted) {
        await downloadFunction();
        return true;
      } else {
        // Mostrar di√°logo informativo si no se otorgaron permisos
        await showStoragePermissionDialog(context);
        return false;
      }
    } catch (e) {
      print('‚ùå Error en descarga con permisos: $e');
      
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error al descargar archivo: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }
      return false;
    }
  }

  /// Verifica y solicita todos los permisos necesarios al iniciar la app
  static Future<Map<String, bool>> checkAndRequestPermissions() async {
    print('üîê Iniciando verificaci√≥n de permisos...');
    
    final results = <String, bool>{};
    
    try {
      // 1. Permisos de ubicaci√≥n
      print('üìç Verificando permisos de ubicaci√≥n...');
      if (await hasLocationPermissions()) {
        results['location'] = true;
        print('‚úÖ Permisos de ubicaci√≥n ya otorgados');
      } else {
        final locationGranted = await requestLocationPermissions();
        results['location'] = locationGranted;
        print(locationGranted ? '‚úÖ Permisos de ubicaci√≥n otorgados' : '‚ùå Permisos de ubicaci√≥n denegados');
      }

      // 2. Permisos de c√°mara
      print('üì∑ Verificando permisos de c√°mara...');
      if (await hasCameraPermissions()) {
        results['camera'] = true;
        print('‚úÖ Permisos de c√°mara ya otorgados');
      } else {
        final cameraGranted = await requestCameraPermissions();
        results['camera'] = cameraGranted;
        print(cameraGranted ? '‚úÖ Permisos de c√°mara otorgados' : '‚ùå Permisos de c√°mara denegados');
      }

      // 3. Permisos de almacenamiento (solo Android)
      if (Platform.isAndroid) {
        print('üíæ Verificando permisos de almacenamiento...');
        if (await hasStoragePermissions()) {
          results['storage'] = true;
          print('‚úÖ Permisos de almacenamiento ya otorgados');
        } else {
          final storageGranted = await requestStoragePermissions();
          results['storage'] = storageGranted;
          print(storageGranted ? '‚úÖ Permisos de almacenamiento otorgados' : '‚ùå Permisos de almacenamiento denegados');
        }
      } else {
        results['storage'] = true; // iOS no requiere permisos especiales
        print('‚úÖ Permisos de almacenamiento no requeridos en iOS');
      }

      print('üîê Verificaci√≥n de permisos completada: $results');
      return results;
      
    } catch (e) {
      print('‚ùå Error verificando permisos: $e');
      return {
        'location': false,
        'camera': false,
        'storage': false,
      };
    }
  }

  /// Muestra un di√°logo informativo sobre permisos denegados
  static Future<void> showPermissionDeniedDialog(
    BuildContext context,
    List<String> deniedPermissions,
  ) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(Icons.warning, color: Colors.orange[600]),
              const SizedBox(width: 8),
              const Text('Permisos Requeridos'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'La aplicaci√≥n necesita los siguientes permisos para funcionar correctamente:',
                style: TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 16),
              ...deniedPermissions.map((permission) => Padding(
                padding: const EdgeInsets.symmetric(vertical: 4),
                child: Row(
                  children: [
                    Icon(
                      _getPermissionIcon(permission),
                      size: 20,
                      color: Colors.red[600],
                    ),
                    const SizedBox(width: 8),
                    Text(_getPermissionDescription(permission)),
                  ],
                ),
              )),
              const SizedBox(height: 16),
              const Text(
                'Por favor, habilita estos permisos en la configuraci√≥n de la aplicaci√≥n para continuar.',
                style: TextStyle(fontSize: 14, fontStyle: FontStyle.italic),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancelar'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                openAppSettings();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue[600],
                foregroundColor: Colors.white,
              ),
              child: const Text('Ir a Configuraci√≥n'),
            ),
          ],
        );
      },
    );
  }

  /// Obtiene el icono para un permiso espec√≠fico
  static IconData _getPermissionIcon(String permission) {
    switch (permission) {
      case 'location':
        return Icons.location_on;
      case 'camera':
        return Icons.camera_alt;
      case 'storage':
        return Icons.storage;
      default:
        return Icons.warning;
    }
  }

  /// Obtiene la descripci√≥n para un permiso espec√≠fico
  static String _getPermissionDescription(String permission) {
    switch (permission) {
      case 'location':
        return 'Ubicaci√≥n - Para capturar coordenadas GPS en las visitas';
      case 'camera':
        return 'C√°mara - Para tomar fotos de evidencias y firmas';
      case 'storage':
        return 'Almacenamiento - Para descargar reportes y guardar archivos';
      default:
        return 'Permiso requerido';
    }
  }
}
