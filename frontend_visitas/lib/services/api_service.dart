import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:frontend_visitas/utils/platform_compat.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:jwt_decoder/jwt_decoder.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:frontend_visitas/services/permission_service.dart';

// Importa tus modelos y configuraci√≥n
import 'package:frontend_visitas/config.dart';
import 'package:frontend_visitas/models/visita.dart';
import 'package:frontend_visitas/models/municipio.dart';
import 'package:frontend_visitas/models/sede.dart';
import 'package:frontend_visitas/models/institucion.dart';
import 'package:frontend_visitas/models/usuario.dart';

import 'package:frontend_visitas/models/evaluacion_item.dart';
import 'package:frontend_visitas/models/item_pae.dart';
import 'package:frontend_visitas/models/checklist_categoria.dart';
import 'package:frontend_visitas/models/checklist_item.dart';
import 'package:frontend_visitas/models/visita_respuesta.dart';
import 'package:frontend_visitas/models/evidencia.dart';
import 'package:frontend_visitas/models/visita_programada.dart';

import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/material.dart';
import 'error_handler_service.dart';

class ApiService {
  // Configuraci√≥n de almacenamiento seguro
  static const _storage = FlutterSecureStorage(
    aOptions: AndroidOptions(
      encryptedSharedPreferences: true,
    ),
    iOptions: IOSOptions(
      accessibility: KeychainAccessibility.first_unlock_this_device,
    ),
  );

  // --- M√âTODOS AUXILIARES ---
  Future<String?> getToken() async {
    return await _storage.read(key: 'access_token');
  }

  Future<String?> getRefreshToken() async {
    return await _storage.read(key: 'refresh_token');
  }

  Future<int?> getUsuarioId() async {
    final token = await getToken();
    if (token != null && !JwtDecoder.isExpired(token)) {
      Map<String, dynamic> decodedToken = JwtDecoder.decode(token);
      return decodedToken['id'];
    }
    return null;
  }

  Future<bool> isAuthenticated() async {
    final token = await getToken();
    return token != null && !JwtDecoder.isExpired(token);
  }

  Future<Map<String, String>> _getHeaders() async {
    final token = await getToken();
    if (token == null) {
      return {
        'Content-Type': 'application/json; charset=UTF-8',
      };
    }
    
    // Verificar si el token est√° expirado
    if (JwtDecoder.isExpired(token)) {
      // Intentar renovar el token
      final refreshed = await refreshAccessToken();
      if (refreshed) {
        // Obtener el nuevo token
        final newToken = await getToken();
        return {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $newToken',
        };
      } else {
        await logout();
        return {
          'Content-Type': 'application/json; charset=UTF-8',
        };
      }
    }
    
    return {
      'Content-Type': 'application/json; charset=UTF-8',
      'Authorization': 'Bearer $token',
    };
  }

  // --- AUTENTICACI√ìN ---
  Future<Map<String, dynamic>> login(String email, String password) async {
    final response = await http.post(
      Uri.parse('$baseUrl/api/auth/login'),
      headers: {'Content-Type': 'application/json; charset=UTF-8'},
      body: jsonEncode({'correo': email, 'contrasena': password}),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      
      // Guardar tokens de forma segura
      await _storage.write(key: 'access_token', value: data['access_token']);
      if (data['refresh_token'] != null) {
        await _storage.write(key: 'refresh_token', value: data['refresh_token']);
      }
      
      // Tambi√©n guardar en SharedPreferences para compatibilidad (solo el rol)
      final prefs = await SharedPreferences.getInstance();
      if (data['usuario'] != null && data['usuario']['rol'] != null) {
        await prefs.setString('rol', data['usuario']['rol']['nombre']);
      }
      
      return data;
    } else {
      throw Exception('Error al iniciar sesi√≥n: ${response.body}');
    }
  }

  Future<void> logout() async {
    // Limpiar tokens del almacenamiento seguro
    await _storage.delete(key: 'access_token');
    await _storage.delete(key: 'refresh_token');
    
    // Limpiar datos de SharedPreferences
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('token');
    await prefs.remove('rol');
  }

  Future<Map<String, dynamic>> register(String nombre, String email, String password) async {
    final response = await http.post(
      Uri.parse('$baseUrl/api/auth/register'),
      headers: {'Content-Type': 'application/json; charset=UTF-8'},
      body: jsonEncode({
        'nombre': nombre,
        'correo': email,
        'contrasena': password,
        'rol_id': 4, // Rol Visitador (ID: 1=Super Admin, 2=Admin, 3=Supervisor, 4=Visitador)
      }),
    );

    if (response.statusCode == 201) {
      final data = jsonDecode(response.body);
      return {
        'success': true,
        'message': 'Usuario registrado exitosamente',
        'usuario': data['usuario'],
      };
    } else {
      final errorData = jsonDecode(response.body);
      return {
        'success': false,
        'message': errorData['detail'] ?? 'Error en el registro',
      };
    }
  }

  // --- RENOVACI√ìN AUTOM√ÅTICA DE TOKENS ---
  Future<bool> refreshAccessToken() async {
    try {
      final refreshToken = await getRefreshToken();
      if (refreshToken == null) return false;

      final response = await http.post(
        Uri.parse('$baseUrl/api/auth/refresh'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'refresh_token': refreshToken}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        await _storage.write(key: 'access_token', value: data['access_token']);
        return true;
      }
      return false;
    } catch (e) {
      print('Error renovando token: $e');
      return false;
    }
  }

  /// Obtiene el perfil del usuario autenticado
  Future<Map<String, dynamic>> getPerfilUsuario() async {
    final headers = await _getHeaders();
    final response = await http.get(
      Uri.parse('$baseUrl/api/perfil'),
      headers: headers,
    );
    
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return data;
    } else {
      // Si no hay endpoint espec√≠fico, devolver datos del token
      final token = await getToken();
      if (token != null && !JwtDecoder.isExpired(token)) {
        Map<String, dynamic> decodedToken = JwtDecoder.decode(token);
        return {
          'nombre': decodedToken['nombre'] ?? 'Usuario',
          'rol': decodedToken['rol'] ?? 'Visitador',
          'email': decodedToken['sub'] ?? 'usuario@example.com',
        };
      }
      throw Exception('Error al obtener perfil de usuario: ${response.body}');
    }
  }

  /// Cambia la contrase√±a del usuario autenticado
  Future<bool> cambiarContrasena({
    required String contrasenaActual,
    required String contrasenaNueva,
  }) async {
    try {
      final headers = await _getHeaders();
      
      final body = {
        'contrasena_actual': contrasenaActual,
        'contrasena_nueva': contrasenaNueva,
      };

      final response = await http.put(
        Uri.parse('$baseUrl/api/auth/cambiar-contrasena'),
        headers: headers,
        body: jsonEncode(body),
      );

      print('üîë Cambiar contrase√±a - Status: ${response.statusCode}');
      print('üîë Response: ${response.body}');

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå Error en cambiarContrasena: $e');
      throw Exception('Error al cambiar contrase√±a: $e');
    }
  }

  // --- OBTENER DATOS ---
  Future<List<Visita>> getMisVisitas() async {
    final headers = await _getHeaders();
    final response = await http.get(Uri.parse('$baseUrl/api/visitas/mis-visitas'), headers: headers);
    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => Visita.fromJson(json)).toList();
    } else {
      throw Exception('Error al cargar visitas');
    }
  }

  Future<List<Visita>> getMisVisitasPorEstado(String estado) async {
    final headers = await _getHeaders();
    final response = await http.get(Uri.parse('$baseUrl/api/visitas/mis-visitas?estado=$estado'), headers: headers);
    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => Visita.fromJson(json)).toList();
    } else {
      throw Exception('Error al cargar visitas por estado');
    }
  }

  Future<List<Municipio>> getMunicipios() async {
    try {
      final headers = await _getHeaders();
      final url = '$baseUrl/api/municipios';
      print('üîó Solicitando municipios a: $url');
      print('üîë Headers: $headers');
      
      final response = await http.get(Uri.parse(url), headers: headers);
      
      print('üìå Body: ${response.body}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('üìä Datos parseados: $data');
        
        final municipios = data.map((json) {
          print('üèõÔ∏è Procesando municipio: $json');
          return Municipio.fromJson(json);
        }).toList();
        
        print('‚úÖ Municipios procesados: ${municipios.length}');
        return municipios;
      } else {
        throw Exception('Error al cargar municipios. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getMunicipios: $e');
      throw Exception('Error al cargar municipios: $e');
    }
  }

  Future<List<Institucion>> getInstituciones() async {
    final headers = await _getHeaders();
    final response = await http.get(Uri.parse('$baseUrl/api/instituciones'), headers: headers);
    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => Institucion.fromJson(json)).toList();
    } else {
      throw Exception('Error al cargar instituciones');
    }
  }

  Future<List<Institucion>> getInstitucionesPorMunicipio(int municipioId) async {
    try {
      final headers = await _getHeaders();
      final url = '$baseUrl/api/instituciones_por_municipio/$municipioId';
      print('üîó Solicitando instituciones a: $url');
      print('üîë Headers: $headers');
      
      final response = await http.get(Uri.parse(url), headers: headers);
      
      print('üìå Body: ${response.body}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('üìä Datos parseados: $data');
        
        final instituciones = data.map((json) {
          print('üèõÔ∏è Procesando instituci√≥n: $json');
          return Institucion.fromJson(json);
        }).toList();
        
        print('‚úÖ Instituciones procesadas: ${instituciones.length}');
        return instituciones;
      } else {
        throw Exception('Error al obtener instituciones por municipio. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getInstitucionesPorMunicipio: $e');
      throw Exception('Error al obtener instituciones por municipio: $e');
    }
  }

  /// Obtiene las sedes filtradas por el ID de un municipio.
  Future<List<Sede>> getSedesPorMunicipio(int municipioId) async {
    final response = await http.get(
      Uri.parse('$baseUrl/api/sedes_por_municipio/$municipioId'),
      headers: await _getHeaders(),
    );
    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => Sede.fromJson(json)).toList();
    } else {
      throw Exception('Error al cargar sedes por municipio. C√≥digo: ${response.statusCode}');
    }
  }

  /// Obtiene las sedes filtradas por el ID de una instituci√≥n.
  Future<List<Sede>> getSedesPorInstitucion(int institucionId) async {
    try {
      final headers = await _getHeaders();
      final url = '$baseUrl/api/sedes_institucion/$institucionId';
      print('üîó Solicitando sedes a: $url');
      print('üîë Headers: $headers');
      
      final response = await http.get(Uri.parse(url), headers: headers);
      
      print('üìå Body: ${response.body}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('üìä Datos parseados: $data');
        
        final sedes = data.map((json) {
          print('üè´ Procesando sede: $json');
          return Sede.fromJson(json);
        }).toList();
        
        print('‚úÖ Sedes procesadas: ${sedes.length}');
        return sedes;
      } else {
        throw Exception('Error al cargar sedes por instituci√≥n. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getSedesPorInstitucion: $e');
      throw Exception('Error al cargar sedes por instituci√≥n: $e');
    }
  }

  /// Obtiene todas las sedes disponibles.
  Future<List<Sede>> getSedes() async {
    try {
      final headers = await _getHeaders();
      final url = '$baseUrl/api/sedes';
      print('üîó Solicitando todas las sedes a: $url');
      
      final response = await http.get(Uri.parse(url), headers: headers);
      
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        final sedes = data.map((json) => Sede.fromJson(json)).toList();
        print('‚úÖ Sedes obtenidas: ${sedes.length}');
        return sedes;
      } else {
        throw Exception('Error al cargar sedes. C√≥digo: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getSedes: $e');
      throw Exception('Error al cargar sedes: $e');
    }
  }

  /// Obtiene todos los usuarios disponibles.
  Future<List<Usuario>> getUsuarios() async {
    try {
      final headers = await _getHeaders();
      final url = '$baseUrl/api/admin/usuarios';
      print('üîó Solicitando todos los usuarios a: $url');
      
      final response = await http.get(Uri.parse(url), headers: headers);
      
      print('üìå Respuesta de usuarios - Status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        final usuarios = data.map((json) => Usuario.fromJson(json)).toList();
        print('‚úÖ Usuarios obtenidos: ${usuarios.length}');
        return usuarios;
      } else {
        throw Exception('Error al cargar usuarios. C√≥digo: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getUsuarios: $e');
      throw Exception('Error al cargar usuarios: $e');
    }
  }

  // --- CREAR VISITA ---
  Future<bool> crearVisita({
    required int sedeId,
    required String tipoAsunto,
    required String observaciones,
    required double lat,
    required double lon,
    required String prioridad,
    required String hora,
    File? fotoEvidencia,
    File? firma,
  }) async {
    final token = await getToken();
    final usuarioId = await getUsuarioId();
    if (usuarioId == null) throw Exception('No se pudo obtener el ID del usuario');

    var request = http.MultipartRequest('POST', Uri.parse('$baseUrl/api/visitas'));
    request.headers['Authorization'] = 'Bearer $token';

    request.fields.addAll({
      'sede_id': sedeId.toString(),
      'usuario_id': usuarioId.toString(),
      'tipo_asunto': tipoAsunto,
      'observaciones': observaciones,
      'lat': lat.toString(),
      'lon': lon.toString(),
      'prioridad': prioridad,
      'hora': hora,
    });

    if (fotoEvidencia != null) {
      request.files.add(await http.MultipartFile.fromPath('foto_evidencia', fotoEvidencia.path));
    }

    if (firma != null) {
      request.files.add(await http.MultipartFile.fromPath('foto_firma', firma.path));
    }

    final response = await request.send();
    return response.statusCode == 201;
  }

  // --- CREAR VISITA COMPLETA PAE ---
  Future<bool> crearVisitaCompletaPAE({
    required DateTime fechaVisita,
    required TimeOfDay horaVisita,
    required String contrato,
    required String operador,
    required int municipioId,
    required int institucionId,
    required int sedeId,
    int? profesionalId,
    required String casoAtencionPrioritaria,
    required String tipoVisita,
    required String prioridad,
    required String observaciones,
    double? lat,
    double? lon,
    double? precisionGps,
    Map<int, String>? respuestasChecklist,
  }) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      // Validar IDs del checklist antes de enviar
      if (respuestasChecklist != null && respuestasChecklist.isNotEmpty) {
        // Obtener el checklist actual para validaci√≥n
        try {
          final checklist = await getChecklist();
          final validacion = validarChecklistIds(respuestasChecklist, checklist);
          
          if (!validacion['esValido']) {
            print('‚ùå Validaci√≥n del checklist fall√≥: ${validacion['mensaje']}');
            throw Exception('IDs del checklist inv√°lidos: ${validacion['idsInvalidos']}. Por favor, recarga la p√°gina y vuelve a intentar.');
          }
          
          print('‚úÖ Validaci√≥n del checklist exitosa: ${validacion['mensaje']}');
        } catch (e) {
          print('‚ö†Ô∏è No se pudo validar el checklist: $e');
          // Continuar sin validaci√≥n si hay error
        }
      }
      
      // Preparar las respuestas del checklist
      List<Map<String, dynamic>> respuestas = [];
      if (respuestasChecklist != null) {
        respuestasChecklist.forEach((itemId, respuesta) {
          respuestas.add({
            "item_id": itemId,
            "respuesta": respuesta,
            "observacion": null
          });
        });
      }

      final body = {
        "fecha_visita": fechaVisita.toIso8601String(),
        "contrato": contrato,
        "operador": operador,
        "municipio_id": municipioId,
        "institucion_id": institucionId,
        "sede_id": sedeId,
        "profesional_id": profesionalId,
        "caso_atencion_prioritaria": casoAtencionPrioritaria,
        "observaciones": observaciones,
        "respuestas_checklist": respuestas,
      };

      final url = '$baseUrl/api/visitas-completas-pae';
      print('üîó === INICIANDO ENV√çO DE CRONOGRAMA ===');
      print('üîó URL: $url');
      print('üîó Base URL: $baseUrl');
      print('üîë Headers: $headers');
      print('üì¶ Body: $body');
      print('üìã Respuestas checklist incluidas: ${respuestasChecklist?.length ?? 0} items');

      // Verificar conectividad antes de enviar
      try {
        final testFuture = http.get(
          Uri.parse('$baseUrl/'),
          headers: {'Content-Type': 'application/json'},
        );
        final testResponse = await testFuture.timeout(
          const Duration(seconds: 5),
          onTimeout: () {
            throw Exception('Timeout: No se pudo conectar en 5 segundos');
          },
        );
        print('‚úÖ Conexi√≥n al servidor verificada: ${testResponse.statusCode}');
      } catch (testError) {
        print('‚ùå Error al verificar conexi√≥n: $testError');
        throw Exception('No se pudo conectar con el servidor en $baseUrl. Verifica que el contenedor est√© corriendo y accesible.');
      }

      final postFuture = http.post(
        Uri.parse(url),
        headers: headers,
        body: jsonEncode(body),
      );
      final response = await postFuture.timeout(
        const Duration(seconds: 30),
        onTimeout: () {
          throw Exception('Timeout: El servidor tard√≥ demasiado en responder');
        },
      );

      // Verificar si es un error de autenticaci√≥n
      if (response.statusCode == 401) {
        throw Exception('UNAUTHORIZED');
      }

      // NOTA: Sincronizaci√≥n deshabilitada autom√°ticamente despu√©s de crear cronograma
      // Si necesitas sincronizar, hazlo manualmente desde el dashboard
      // 
      // if (response.statusCode == 200 || response.statusCode == 201) {
      //   try {
      //     final syncResult = await sincronizarTodasLasVisitas();
      //     print('‚úÖ Sincronizaci√≥n completada. Resultado: $syncResult');
      //   } catch (e) {
      //     print('‚ö†Ô∏è Error en sincronizaci√≥n: $e');
      //   }
      // } else {
      //   print('‚ùå No se pudo crear el cronograma. Status: ${response.statusCode}');
      // }
      
      if (response.statusCode != 200 && response.statusCode != 201) {
        print('‚ùå No se pudo crear el cronograma. Status: ${response.statusCode}');
      }

      return response.statusCode == 200 || response.statusCode == 201;
    } catch (e) {
      print('‚ùå === ERROR AL CREAR CRONOGRAMA ===');
      print('‚ùå Tipo de error: ${e.runtimeType}');
      print('‚ùå Mensaje: $e');
      print('‚ùå Base URL intentada: $baseUrl');
      
      // Verificar si es un error de autenticaci√≥n
      if (e.toString().contains('UNAUTHORIZED') || e.toString().contains('401') || e.toString().contains('Unauthorized')) {
        await logout(); // Limpiar token expirado
        throw Exception('UNAUTHORIZED');
      }
      
      // Detectar errores de conexi√≥n
      if (e.toString().contains('Failed to fetch') || 
          e.toString().contains('SocketException') || 
          e.toString().contains('NetworkError') ||
          e.toString().contains('ClientException') ||
          e.toString().contains('TimeoutException') ||
          e.toString().contains('timeout')) {
        String mensaje = 'Error de conexi√≥n: No se pudo conectar con el servidor en $baseUrl.\n\n';
        mensaje += 'Verifica:\n';
        mensaje += '1. El contenedor Docker est√° corriendo\n';
        mensaje += '2. La IP del servidor es correcta\n';
        mensaje += '3. El firewall permite conexiones al puerto 8000\n';
        mensaje += '4. Puedes acceder a $baseUrl/ en tu navegador';
        throw Exception(mensaje);
      }
      
      // Error gen√©rico
      String mensajeError = 'Error al crear cronograma PAE';
      if (e.toString().isNotEmpty) {
        mensajeError += ': ${e.toString()}';
      }
      
      throw Exception(mensajeError);
    }
  }



  // --- OBTENER CHECKLIST COMPLETO ---
  Future<List<dynamic>> getChecklist() async {
    try {
      // Primero intentamos sin autenticaci√≥n (el endpoint es p√∫blico)
      final response = await http.get(
        Uri.parse('$baseUrl/api/checklist'),
        headers: {'Content-Type': 'application/json'},
      );

      print('üîó Obteniendo checklist desde: $baseUrl/api/checklist');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('üìä Checklist cargado desde BD: ${data.length} categor√≠as');
        
        // Contar total de items
        int totalItems = 0;
        for (var categoria in data) {
          if (categoria['items'] != null) {
            totalItems += (categoria['items'] as List).length;
          }
        }
        print('üìã Total de items: $totalItems');
        
        return data;
      } else {
        print('‚ö†Ô∏è Error ${response.statusCode}: ${response.body}');
        print('üîÑ Usando datos mock como fallback...');
        return _getMockChecklist();
      }
    } catch (e) {
      print('‚ùå Error en getChecklist: $e');
      print('üîÑ Usando datos mock como fallback...');
      return _getMockChecklist();
    }
  }

  /// Validar IDs del checklist antes de enviar al backend
  Map<String, dynamic> validarChecklistIds(Map<int, String> respuestasChecklist, List<dynamic> checklist) {
    print('üîç Validando IDs del checklist...');
    
    // Extraer todos los IDs v√°lidos del checklist
    Set<int> idsValidos = {};
    for (var categoria in checklist) {
      if (categoria['items'] != null) {
        for (var item in categoria['items']) {
          idsValidos.add(item['id']);
        }
      }
    }
    
    print('üìã IDs v√°lidos encontrados: ${idsValidos.length}');
    print('üÜî Rango de IDs: ${idsValidos.isNotEmpty ? '${idsValidos.reduce((a, b) => a < b ? a : b)} - ${idsValidos.reduce((a, b) => a > b ? a : b)}' : 'N/A'}');
    
    // Validar cada respuesta del checklist
    List<int> idsInvalidos = [];
    List<int> idsValidosEncontrados = [];
    
    for (int id in respuestasChecklist.keys) {
      if (idsValidos.contains(id)) {
        idsValidosEncontrados.add(id);
      } else {
        idsInvalidos.add(id);
      }
    }
    
    // Preparar resultado de validaci√≥n
    Map<String, dynamic> resultado = {
      'esValido': idsInvalidos.isEmpty,
      'idsInvalidos': idsInvalidos,
      'idsValidos': idsValidosEncontrados,
      'totalRespuestas': respuestasChecklist.length,
      'totalIdsValidos': idsValidos.length,
      'mensaje': idsInvalidos.isEmpty 
          ? '‚úÖ Todos los IDs del checklist son v√°lidos'
          : '‚ùå Se encontraron ${idsInvalidos.length} IDs inv√°lidos: $idsInvalidos'
    };
    
    print('üîç Resultado de validaci√≥n: ${resultado['mensaje']}');
    if (idsInvalidos.isNotEmpty) {
      print('‚ö†Ô∏è IDs inv√°lidos detectados: $idsInvalidos');
      print('‚úÖ IDs v√°lidos encontrados: $idsValidosEncontrados');
    }
    
    return resultado;
  }

  /// Datos mock temporales para el checklist PAE 2025 
  List<dynamic> _getMockChecklist() {
    print('üîÑ Generando datos mock del checklist PAE 2025 completo (15 categor√≠as, 64 items)...');
    return [
      {
        "id": 1,
        "nombre": "Dise√±o, construcci√≥n y disposici√≥n de residuos s√≥lidos",
        "items": [
          {
            "id": 52,
            "pregunta_texto": "No se evidencia presencia de animales en √°reas de producci√≥n, almacenamiento, distribuci√≥n o consumo de alimentos."
          },
          {
            "id": 53,
            "pregunta_texto": "Los residuos s√≥lidos est√°n ubicados de manera que no representen riesgo de contaminaci√≥n para el alimento, para los ambientes o superficies de potencial contacto con este."
          },
          {
            "id": 54,
            "pregunta_texto": "Los residuos s√≥lidos son removidos frecuentemente de las √°reas de producci√≥n y est√°n ubicados de manera que se evite la generaci√≥n de malos olores, el refugio de animales y plagas y que adem√°s no contribuya al deterioro ambiental."
          },
          {
            "id": 55,
            "pregunta_texto": "Los residuos s√≥lidos son removidos frecuentemente de las √°reas de producci√≥n y est√°n ubicados de manera que se evite la generaci√≥n de malos olores, el refugio de animales y plagas y que adem√°s no contribuya al deterioro ambiental."
          },
          {
            "id": 56,
            "pregunta_texto": "Los recipientes utilizados para almacenamiento de residuos org√°nicos e inorg√°nicos, son a prueba de fugas, debidamente identificados, construidos de material impermeable, de f√°cil limpieza y desinfecci√≥n y de ser requerido est√°n provistos de tapa herm√©tica, dichos recipientes no pueden utilizarse para contener productos comestibles."
          },
        ],
      },
      {
        "id": 2,
        "nombre": "Equipos y utensilios",
        "items": [
          {
            "id": 115,
            "pregunta_texto": "Los equipos se encuentran instalados y ubicados seg√∫n la secuencia l√≥gica del proceso tecnol√≥gico, desde la recepci√≥n de las materias primas y dem√°s insumos, hasta el envasado y embalaje del producto terminado."
          },
          {
            "id": 116,
            "pregunta_texto": "La distancia entre los equipos y las paredes perimetrales, columnas u otros elementos de la edificaci√≥n, permite el funcionamiento de los equipos y facilita el acceso para la inspecci√≥n, mantenimiento, limpieza y desinfecci√≥n."
          },
        ],
      },
      {
        "id": 3,
        "nombre": "Personal manipulador",
        "items": [
          {
            "id": 57,
            "pregunta_texto": "El personal manipulador cuenta con certificaci√≥n m√©dica, la cual especifique ser apto(a) para manipular alimentos."
          },
          {
            "id": 58,
            "pregunta_texto": "Se cuenta con un plan de capacitaci√≥n continuo y permanente para el personal manipulador de alimentos desde el momento de su contrataci√≥n y luego ser reforzado mediante charlas, cursos u otros medios efectivos de actualizaci√≥n. Dicho plan debe ser de por lo menos 10 horas anuales, sobre asuntos espec√≠ficos relacionados al tema."
          },
          {
            "id": 59,
            "pregunta_texto": "El manipulador de alimentos se encuentra capacitado para comprender y manejar el control de los puntos del proceso que est√°n bajo su responsabilidad y la importancia de su vigilancia o monitoreo; adem√°s, conoce los l√≠mites del punto del proceso y las acciones correctivas a tomar cuando existan desviaciones en dichos l√≠mites."
          },
        ],
      },
      {
        "id": 4,
        "nombre": "Pr√°cticas Higi√©nicas y Medidas de Protecci√≥n",
        "items": [
          {
            "id": 60,
            "pregunta_texto": "El personal manipulador cuenta con una estricta limpieza e higiene personal y aplica buenas pr√°cticas higi√©nicas en sus labores, de manera que se evite la contaminaci√≥n del alimento y de las superficies de contacto con este."
          },
          {
            "id": 61,
            "pregunta_texto": "El personal manipulador usa vestimenta de trabajo que cumpla los siguientes requisitos: De color claro que permita visualizar f√°cilmente su limpieza; con cierres o cremalleras y/o broches en lugar de botones u otros accesorios que puedan caer en el alimento; sin bolsillos ubicados por encima de la cintura; usa calzado cerrado, de material resistente e impermeable y de tac√≥n bajo. Cuando se utiliza delantal, este permanece atado al cuerpo en forma segura."
          },
          {
            "id": 62,
            "pregunta_texto": "El operador hace entrega de la dotaci√≥n completa al personal manipulador, conformada por (camisa, pantal√≥n, cofia, tapaboca, delantal y calzado cerrado) en la cantidad establecida en el contrato vigente y de acuerdo con lo estipulado en el anexo t√©cnico. En caso que por usos y costumbres el personal manipulador no utilice la dotaci√≥n establecida, se cuenta con la certificaci√≥n firmada por el personal manipulador."
          },
          {
            "id": 63,
            "pregunta_texto": "El operador entrega en el per√≠odo los siguientes elementos de higiene para cada manipulador(a): * 1 Jab√≥n antibacterial inoloro en cantidad mayor o igual a 300 mL/cc * 1 Rollo de papel higi√©nico"
          },
          {
            "id": 64,
            "pregunta_texto": "El personal manipulador se lava y desinfecta las manos con agua y jab√≥n antibacterial, antes de comenzar su trabajo, cada vez que salga y regrese al √°rea asignada y despu√©s de manipular cualquier material u objeto que pudiese representar un riesgo de contaminaci√≥n para el alimento."
          },
          {
            "id": 65,
            "pregunta_texto": "El personal manipulador cumple: * Mantiene el cabello recogido y cubierto totalmente mediante malla, gorro u otro medio efectivo y en caso de llevar barba, bigote o patillas usa cubiertas para estas. *No usa maquillaje.* utiliza tapabocas cubriendo nariz y boca mientras se manipula el alimento. *Mantiene las u√±as cortas, limpias y sin esmalte. * No utiliza reloj, anillos, aretes, joyas u otros accesorios mientras realice sus labores. En caso de usar lentes, deben asegurarse a la cabeza mediante bandas, cadenas u otros medios ajustables."
          },
          {
            "id": 66,
            "pregunta_texto": "De ser necesario el uso de guantes, estos se mantienen limpios, sin roturas o desperfectos y son tratados con el mismo cuidado higi√©nico de las manos sin protecci√≥n. El material de los guantes, es apropiado para la operaci√≥n realizada y evitan la acumulaci√≥n de humedad y contaminaci√≥n en su interior para prevenir posibles afecciones cut√°neas de los operarios. El uso de guantes no exime al operario de la obligaci√≥n de lavarse las manos."
          },
          {
            "id": 67,
            "pregunta_texto": "El personal manipulador no realiza actividades como: Beber o masticar cualquier objeto o producto, fumar o escupir en las √°reas de producci√≥n o en cualquier otra zona donde exista riesgo de contaminaci√≥n del alimento."
          },
          {
            "id": 68,
            "pregunta_texto": "El personal manipulador no presenta afecciones de la piel o enfermedad infectocontagiosa."
          },
          {
            "id": 69,
            "pregunta_texto": "Los visitantes de los establecimientos cumplen estrictamente todas las pr√°cticas de higiene y portan la vestimenta y/o dotaci√≥n adecuada."
          },
        ],
      },
      {
        "id": 5,
        "nombre": "Materias primas e insumos",
        "items": [
          {
            "id": 70,
            "pregunta_texto": "La recepci√≥n de materias primas se realiza en condiciones que eviten su contaminaci√≥n, alteraci√≥n y da√±os f√≠sicos y est√°n debidamente identificadas de conformidad con la Resoluci√≥n 5109 de 2005 o las normas que la modifiquen, adicionen o sustituyan, y para el caso de los insumos, deben cumplir con las resoluciones 1506 de 2011 y/o la 683 de 2012, seg√∫n corresponda, o las normas que las modifiquen, adicionen o sustituyan."
          },
          {
            "id": 71,
            "pregunta_texto": "Las materias primas son sometidas a limpieza con agua potable u otro medio adecuado de ser requerido, se aplica la descontaminaci√≥n previa a su incorporaci√≥n en las etapas sucesivas del proceso."
          },
          {
            "id": 72,
            "pregunta_texto": "Las materias primas conservadas por congelaci√≥n que requieren ser descongeladas previo al uso, se descogelan a una velocidad controlada para evitar el desarrollo de microorganismos y no son recongeladas. Adem√°s, se manipulan de manera que se minimiza la contaminaci√≥n proveniente de otras fuentes."
          },
          {
            "id": 73,
            "pregunta_texto": "Las materias primas e insumos se almacenan en sitios exclusivos y adecuados que evitan su contaminaci√≥n y alteraci√≥n."
          },
          {
            "id": 74,
            "pregunta_texto": "Los alimentos que por su naturaleza permiten un r√°pido crecimiento de microorganismos indeseables, se mantienen en condiciones que eviten su proliferaci√≥n. - Alimentos a temperaturas de refrigeraci√≥n no mayores a 4¬∞C/2¬∫C. - Alimento en estado congelado (-18 ¬∞C). - Alimento caliente a temperaturas mayores de 60¬∞C (140¬∞F)."
          },
        ],
      },
      {
        "id": 6,
        "nombre": "Operaciones de fabricaci√≥n",
        "items": [
          {
            "id": 75,
            "pregunta_texto": "Las operaciones de fabricaci√≥n se realizan en forma secuencial y continua para que no se produzcan retrasos indebidos que permitan el crecimiento de microorganismos, contribuyan a otros tipos de deterioro o contaminaci√≥n del alimento. Cuando se requiera esperar entre una etapa del proceso y la siguiente, el alimento se mantiene protegido y en el caso de alimentos susceptibles al r√°pido crecimiento de microorganismos durante el tiempo de espera, se emplean temperaturas altas (> 60¬∞C) o bajas no mayores de 4¬∞C +/-2¬∫C seg√∫n sea el caso."
          },
          {
            "id": 76,
            "pregunta_texto": "Los procedimientos de manufactura, tales como, lavar, pelar, cortar, clasificar, desmenuzar, extraer, batir, secar, entre otros, se realizan de manera que se protegen los alimentos y las materias primas de la contaminaci√≥n."
          },
        ],
      },
      {
        "id": 7,
        "nombre": "Prevenci√≥n de la contaminaci√≥n cruzada",
        "items": [
          {
            "id": 77,
            "pregunta_texto": "Durante las operaciones de fabricaci√≥n, almacenamiento y distribuci√≥n se toman medidas eficaces para evitar la contaminaci√≥n de los alimentos por contacto directo o indirecto con materias primas que se encuentren en las fases iniciales del proceso."
          },
          {
            "id": 78,
            "pregunta_texto": "Las operaciones de fabricaci√≥n se realizan en forma secuencial y continua para evitar el cruce de flujos de producci√≥n."
          },
          {
            "id": 79,
            "pregunta_texto": "Todo equipo y utensilio que entra en contacto con materias primas o con material contaminado se limpia y se desinfecta cuidadosamente antes de ser utilizado nuevamente."
          },
        ],
      },
      {
        "id": 8,
        "nombre": "Aseguramiento y control de la calidad e inocuidad",
        "items": [
          {
            "id": 80,
            "pregunta_texto": "En la recepci√≥n de materias primas e insumos, se aplican los criterios de aceptaci√≥n, liberaci√≥n, retenci√≥n o rechazo."
          },
        ],
      },
      {
        "id": 9,
        "nombre": "Saneamiento",
        "items": [
          {
            "id": 81,
            "pregunta_texto": "En la carpeta PAE se encuentra el Plan de Saneamiento establecido por la entidad territorial para la vigencia (programa de limpieza y desinfecci√≥n, manejo de residuos, abastecimiento o suministro de agua y control integrado de plagas) con procedimientos escritos y registros de las actividades."
          },
          {
            "id": 82,
            "pregunta_texto": "El operador entrega los implementos de aseo m√≠nimos seg√∫n lo establecido anexos t√©cnicos (mayoritaria /ind√≠gena) y se realiza su reposici√≥n en caso de que aplique."
          },
          {
            "id": 83,
            "pregunta_texto": "El operador entrega los insumos de aseo mensual para el comedor escolar, seg√∫n lo establecido en anexos t√©cnicos (mayoritaria /ind√≠gena) y se realiza su reposici√≥n en caso que aplique."
          },
        ],
      },
      {
        "id": 10,
        "nombre": "Almacenamiento",
        "items": [
          {
            "id": 84,
            "pregunta_texto": "Se lleva control de primeras entradas y primeras salidas a diario, con el fin de garantizar la rotaci√≥n de los productos (formato kardex)."
          },
          {
            "id": 85,
            "pregunta_texto": "El almacenamiento de materia prima e insumos, se realiza ordenadamente en pilas o estibas con separaci√≥n m√≠nima de 60 cent√≠metros con respecto a las paredes perimetrales, y dispone de estibas o tarimas limpias y en buen estado, elevadas del piso por lo menos 15 cent√≠metros de manera que permita la inspecci√≥n, limpieza y fumigaci√≥n, si es el caso."
          },
          {
            "id": 86,
            "pregunta_texto": "En el lugar o espacio destinado al almacenamiento de materia prima e insumos, no se realizan actividades diferentes."
          },
          {
            "id": 87,
            "pregunta_texto": "Los plaguicidas, detergentes, desinfectantes y otras sustancias peligrosas, se encuentran debidamente rotuladas, incluida informaci√≥n sobre su modo de empleo y toxicidad, estos productos se almacenan en √°reas independientes con separaci√≥n f√≠sica y su manipulaci√≥n solo es realizada por personal id√≥neo. Estas √°reas est√°n debidamente identificadas, organizadas, se√±alizadas y aireadas."
          },
        ],
      },
      {
        "id": 11,
        "nombre": "Transporte",
        "items": [
          {
            "id": 88,
            "pregunta_texto": "El transporte de materias primas, insumos y producto terminado (CCT) se realiza en condiciones que impiden la contaminaci√≥n, la proliferaci√≥n de microorganismos y eviten su alteraci√≥n, incluidos los da√±os en el envase o embalaje seg√∫n sea el caso."
          },
          {
            "id": 89,
            "pregunta_texto": "Las materias primas que por su naturaleza requieran mantenerse refrigeradas o congeladas, son transportadas y distribuidas en condiciones que aseguran y garantizan su calidad e inocuidad hasta su destino final. Este procedimiento es susceptible de verificaci√≥n mediante planillas de registro de temperatura del veh√≠culo, durante el transporte, cargue o descargue del alimento."
          },
          {
            "id": 90,
            "pregunta_texto": "Los veh√≠culos de transporte de alimentos, est√°n dise√±ados en material sanitario en su interior y aquellos que poseen sistema de refrigeraci√≥n o congelaci√≥n, cuentan con indicador de temperatura y su funcionamiento garantiza la conservaci√≥n de los alimentos."
          },
          {
            "id": 91,
            "pregunta_texto": "Los contenedores o recipientes en los que se transportan los alimentos o materias primas, est√°n fabricados en materiales sanitarios que facilitan su correcta limpieza y desinfecci√≥n."
          },
          {
            "id": 92,
            "pregunta_texto": "Se dispone de recipientes, canastillas o elementos, de material sanitario, que a√≠slan el producto de toda posibilidad de contaminaci√≥n que pueda presentarse por contacto directo del alimento con el piso del veh√≠culo."
          },
          {
            "id": 93,
            "pregunta_texto": "No se transporta conjuntamente en un mismo veh√≠culo alimentos o materias primas con sustancias peligrosas u otras sustancias que por su naturaleza representen riesgo de contaminaci√≥n para el alimento o la materia prima."
          },
          {
            "id": 94,
            "pregunta_texto": "Los veh√≠culos en los que se transportan los alimentos o materias primas, llevan en su exterior de forma claramente visible la leyenda: Transporte de Alimentos."
          },
          {
            "id": 95,
            "pregunta_texto": "Los veh√≠culos destinados al transporte de alimentos y materias primas, cumplen dentro del territorio colombiano con los requisitos sanitarios que garantizan la adecuada protecci√≥n y conservaci√≥n de los mismos."
          },
        ],
      },
      {
        "id": 12,
        "nombre": "Distribuci√≥n y consumo",
        "items": [
          {
            "id": 99,
            "pregunta_texto": "Se suministra el complemento en el horario establecido. En caso que se presente modificaci√≥n en el horario de servido, se encuentra definido de manera escrita mediante acta de reuni√≥n del CAE."
          },
          {
            "id": 100,
            "pregunta_texto": "El operador hace entrega de las materias primas e insumos, dentro del horario de la jornada escolar o por fuera del horario establecido, siempre y cuando no ponga en riesgo la calidad e inocuidad de las materias primas e insumos, ni la entrega oportuna del complemento alimentario."
          },
          {
            "id": 101,
            "pregunta_texto": "Se promueven los buenos h√°bitos con los estudiantes como lo es el lavado de manos con jab√≥n desinfectante antes del consumo de los alimentos."
          },
          {
            "id": 112,
            "pregunta_texto": "Se suministra el complemento en el horario establecido. En caso que se presente modificaci√≥n en el horario de servido, se encuentra definido de manera escrita mediante acta de reuni√≥n del CAE."
          },
          {
            "id": 113,
            "pregunta_texto": "El operador hace entrega de las materias primas e insumos, dentro del horario de la jornada escolar o por fuera del horario establecido, siempre y cuando no ponga en riesgo la calidad e inocuidad de las materias primas e insumos, ni la entrega oportuna del complemento alimentario."
          },
          {
            "id": 114,
            "pregunta_texto": "Se promueven los buenos h√°bitos con los estudiantes como lo es el lavado de manos con jab√≥n desinfectante antes del consumo de los alimentos."
          },
        ],
      },
      {
        "id": 13,
        "nombre": "Documentaci√≥n PAE",
        "items": [
          {
            "id": 102,
            "pregunta_texto": "Existen avisos de se√±alizaci√≥n de √°reas ubicados en sitios estrat√©gicos y en buen estado (verificar que sea del contrato vigente). Los avisos son: √Årea de recibo de alimentos - √Årea de almacenamiento - √Årea de preparaci√≥n - √Årea de distribuci√≥n - Comedor - √Årea de lavado - Avisos referentes a la necesidad de lavarse las manos luego de usar los servicios sanitarios."
          },
          {
            "id": 103,
            "pregunta_texto": "El operador entrega remisi√≥n de materias primas e insumos (la cual debe contener como m√≠nimo: Nombre de la sede educativa, n√∫mero de cupos adjudicados y atendidos, la modalidad de atenci√≥n, los d√≠as de atenci√≥n para los cuales se est√°n entregando los v√≠veres, tipo de alimentos, unidad de medida, cantidad de entrega y espacio de observaciones), firmada por el personal manipulador de alimentos que recibe y existe copia de este documento en el comedor escolar."
          },
          {
            "id": 104,
            "pregunta_texto": "DEVOLUCIONES O FALTANTES: Se hace reposici√≥n de materias primas o insumos faltantes, antes de la preparaci√≥n o entrega del alimento, de acuerdo con lo planeado en el ciclo de men√∫ y el horario de servido estipulado, haciendo uso del formato establecido por la ETC, denominado \"Reposici√≥n y faltantes de alimentos\", debidamente diligenciado y firmado por el personal manipulador de alimentos y un representante de la unidad de servicio, que certifique la entrega."
          },
          {
            "id": 105,
            "pregunta_texto": "En la carpeta PAE se encuentra el formato CARACTER√çSTICAS DE CALIDAD, COMPRA DE ALIMENTOS Y ELEMENTOS DE ASEO, donde se relacionan los alimentos e insumos entregados por el operador, debidamente diligenciado y legible."
          },
          {
            "id": 106,
            "pregunta_texto": "En la carpeta PAE se encuentra el documento de inventario de equipo y menaje debidamente diligenciado y firmado."
          },
          {
            "id": 107,
            "pregunta_texto": "El comedor escolar tiene publicado en un lugar visible la FICHA T√âCNICA de informaci√≥n del PAE, completamente diligenciada, incluidos los mecanismos que el operador y la ETC, tienen para atender las SPQR en el comedor escolar, de acuerdo con lo establecido por el MEN."
          },
          {
            "id": 108,
            "pregunta_texto": "Se cuenta con la carpeta del Programa de Alimentaci√≥n Escolar, organizada y debidamente identificada, con soportes de los programas implementados, informaci√≥n del personal manipulador (hoja de vida, certificado de BPM), gestiones realizadas y registros de la ejecuci√≥n del programa en el comedor escolar."
          },
          {
            "id": 109,
            "pregunta_texto": "En el comedor escolar est√° conformado el comit√© de alimentaci√≥n escolar (CAE), y en la carpeta PAE reposa copia del acta de constituci√≥n CAE. Cuentan con actas de reuni√≥n del comit√© que evidencien su implementaci√≥n."
          },
        ],
      },
      {
        "id": 14,
        "nombre": "Cobertura",
        "items": [
          {
            "id": 110,
            "pregunta_texto": "Se diligencia diariamente, sin interrupciones el formato registro y control de asistencia de titulares de derecho, beneficiarios del programa, sin tachones o enmendaduras."
          },
          {
            "id": 111,
            "pregunta_texto": "Verificaci√≥n de titulares atendidos en el comedor Escolar donde la respuesta sea seleccionable, donde 1 cumple pr√°cticamente 2 cumple 0 no cumple N/A no aplica y N/O no observado"
          },
        ],
      },
    ];
  }

  // --- OBTENER √çTEMS PAE 2025 ---
  Future<List<ItemPAE>> getItemsPAE() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/items-pae'),
        headers: headers,
      );

      print('üîó Obteniendo √≠tems PAE desde: $baseUrl/api/items-pae');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => ItemPAE.fromJson(json)).toList();
      } else {
        // Si el endpoint no existe, usamos datos mock temporales
        print('‚ö†Ô∏è Endpoint /api/items-pae no disponible. Usando datos mock...');
        return _getMockItemsPAE();
      }
    } catch (e) {
      print('‚ùå Error en getItemsPAE: $e');
      print('üîÑ Usando datos mock como fallback...');
      return _getMockItemsPAE();
    }
  }

  /// Datos mock temporales para los √≠tems PAE 2025
  List<ItemPAE> _getMockItemsPAE() {
    print('üîÑ Generando datos mock de √≠tems PAE 2025...');
    return [
      ItemPAE(
        id: 1,
        nombre: "N√∫mero de manipuladoras de alimentos",
        categoria: "Personal y Recursos Humanos",
        items: [
          SubItemPAE(id: 1, preguntaTexto: "¬øLa cantidad de manipuladoras corresponde al n√∫mero de cupos asignados?"),
          SubItemPAE(id: 2, preguntaTexto: "¬øExiste documentaci√≥n de justificaci√≥n si no se cumple con el personal requerido?"),
        ],
      ),
      ItemPAE(
        id: 2,
        nombre: "Dise√±o, construcci√≥n y disposici√≥n de residuos s√≥lidos",
        categoria: "Infraestructura y Equipamiento",
        items: [
          SubItemPAE(id: 3, preguntaTexto: "¬øNo se evidencia presencia de animales en √°reas de producci√≥n?"),
          SubItemPAE(id: 4, preguntaTexto: "¬øLos residuos s√≥lidos est√°n ubicados sin riesgo de contaminaci√≥n?"),
        ],
      ),
      ItemPAE(
        id: 3,
        nombre: "Equipos y utensilios",
        categoria: "Infraestructura y Equipamiento",
        items: [
          SubItemPAE(id: 5, preguntaTexto: "¬øLos equipos est√°n instalados seg√∫n la secuencia l√≥gica del proceso?"),
          SubItemPAE(id: 6, preguntaTexto: "¬øLa distancia entre equipos permite funcionamiento y mantenimiento?"),
        ],
      ),
      ItemPAE(
        id: 4,
        nombre: "Personal manipulador",
        categoria: "Personal y Recursos Humanos",
        items: [
          SubItemPAE(id: 7, preguntaTexto: "¬øEl personal cuenta con certificaci√≥n m√©dica vigente?"),
          SubItemPAE(id: 8, preguntaTexto: "¬øExiste plan de capacitaci√≥n continua para el personal?"),
        ],
      ),
      ItemPAE(
        id: 5,
        nombre: "Pr√°cticas higi√©nicas y medidas de protecci√≥n",
        categoria: "Personal y Recursos Humanos",
        items: [
          SubItemPAE(id: 9, preguntaTexto: "¬øEl personal mantiene higiene personal estricta?"),
          SubItemPAE(id: 10, preguntaTexto: "¬øSe usa vestimenta de trabajo adecuada?"),
        ],
      ),
    ];
  }

  // --- GUARDAR VISITA CON CHECKLIST ---
  Future<bool> guardarVisitaConChecklist({
    required DateTime fechaVisita,
    required String contrato,
    required String operador,
    required int municipioId,
    required int institucionId,
    required int sedeId,
    required int profesionalId,
    required List<VisitaRespuesta> respuestas,
  }) async {
    try {
      final headers = await _getHeaders();
      final data = {
        'fecha_visita': fechaVisita.toIso8601String(),
        'contrato': contrato,
        'operador': operador,
        'municipio_id': municipioId,
        'institucion_id': institucionId,
        'sede_id': sedeId,
        'profesional_id': profesionalId,
        'respuestas': respuestas.map((r) => r.toJson()).toList(),
      };

      final response = await http.post(
        Uri.parse('$baseUrl/api/visitas'),
        headers: headers,
        body: jsonEncode(data),
      );

      print('üîó Guardando visita con checklist en: $baseUrl/api/visitas');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 201 || response.statusCode == 200) {
        print('‚úÖ Visita con checklist guardada exitosamente');
        return true;
      } else {
        print('‚ùå Error al guardar visita con checklist: ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå Error en guardarVisitaConChecklist: $e');
      return false;
    }
  }

  // --- GUARDAR VISITA CON EVALUACIONES PAE ---
  Future<bool> guardarVisitaConEvaluacionesPAE({
    required DateTime fechaVisita,
    required String contrato,
    required String operador,
    required int municipioId,
    required int institucionId,
    required int sedeId,
    required int profesionalId,
    required List<EvaluacionItem> evaluaciones,
  }) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final body = jsonEncode({
        "fecha_visita": fechaVisita.toIso8601String(),
        "contrato": contrato,
        "operador": operador,
        "municipio_id": municipioId,
        "institucion_id": institucionId,
        "sede_id": sedeId,
        "profesional_id": profesionalId,
        "evaluaciones": evaluaciones.map((e) => e.toJson()).toList(),
      });

      final url = '$baseUrl/api/visitas-pae';
      print('üîó Enviando visita PAE a: $url');
      print('üîë Headers: $headers');
      print('üì¶ Body: $body');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: body,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      return response.statusCode == 201;
    } catch (e) {
      print('‚ùå Error en guardarVisitaConEvaluacionesPAE: $e');
      throw Exception('Error al guardar visita PAE: $e');
    }
  }

  // --- GUARDAR VISITA CON EVALUACIONES PAE Y EVIDENCIAS ---
  Future<bool> guardarVisitaConEvaluacionesPAEYEvidencias({
    required DateTime fechaVisita,
    required String contrato,
    required String operador,
    required int municipioId,
    required int institucionId,
    required int sedeId,
    required int profesionalId,
    required List<EvaluacionItem> evaluaciones,
    required Map<String, List<Evidencia>> evidencias,
  }) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      // Preparar evidencias para env√≠o
      final evidenciasParaEnviar = <String, List<Map<String, dynamic>>>{};
      evidencias.forEach((itemId, listaEvidencias) {
        evidenciasParaEnviar[itemId] = listaEvidencias.map((e) => e.toJson()).toList();
      });

      final body = jsonEncode({
        "fecha_visita": fechaVisita.toIso8601String(),
        "contrato": contrato,
        "operador": operador,
        "municipio_id": municipioId,
        "institucion_id": institucionId,
        "sede_id": sedeId,
        "profesional_id": profesionalId,
        "evaluaciones": evaluaciones.map((e) => e.toJson()).toList(),
        "evidencias": evidenciasParaEnviar,
      });

      final url = '$baseUrl/api/visitas-pae-con-evidencia';
      print('üîó Enviando visita PAE con evidencias a: $url');
      print('üîë Headers: $headers');
      print('üì¶ Body: $body');
      print('üì∏ Evidencias incluidas: ${evidenciasParaEnviar.keys.length} items con evidencias');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: body,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      return response.statusCode == 201;
    } catch (e) {
      print('‚ùå Error en guardarVisitaConEvaluacionesPAEYEvidencias: $e');
      throw Exception('Error al guardar visita PAE con evidencias: $e');
    }
  }

  // --- OBTENER EVALUACIONES DE UNA VISITA ---
  Future<List<EvaluacionItem>> getEvaluacionesVisita(int visitaId) async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/visitas/$visitaId/evaluaciones'),
        headers: headers,
      );

      print('üîó Obteniendo evaluaciones de visita $visitaId');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => EvaluacionItem.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener evaluaciones de la visita');
      }
    } catch (e) {
      print('‚ùå Error en getEvaluacionesVisita: $e');
      throw Exception('Error al obtener evaluaciones de la visita: $e');
    }
  }

  // --- DASHBOARD DEL VISITADOR ---
  Future<Map<String, dynamic>> getEstadisticasVisitador() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/dashboard/estadisticas'),
        headers: headers,
      );

      print('üîó Obteniendo estad√≠sticas desde: $baseUrl/api/dashboard/estadisticas');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('üìä Estad√≠sticas obtenidas: $data');
        return data;
      } else {
        print('‚ùå Error al cargar estad√≠sticas: ${response.statusCode} - ${response.body}');
        throw Exception('Error al cargar estad√≠sticas. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getEstadisticasVisitador: $e');
      throw Exception('Error al cargar estad√≠sticas: $e');
    }
  }

  // --- DASHBOARD DEL SUPERVISOR ---
  // M√©todo eliminado - duplicado con el de la secci√≥n supervisor

  // --- TODAS LAS VISITAS (SUPERVISOR) ---
  Future<List<Visita>> getTodasVisitas() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/visitas/todas'),
        headers: headers,
      );

      print('üîó Obteniendo todas las visitas desde: $baseUrl/api/visitas/todas');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Visita.fromJson(json)).toList();
      } else {
        throw Exception('Error al cargar todas las visitas. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getTodasVisitas: $e');
      throw Exception('Error al cargar todas las visitas: $e');
    }
  }

  // --- GENERAR REPORTES ---
  Future<String?> generarReporte(Map<String, dynamic> parametros) async {
    try {
      final headers = await _getHeaders();
      final response = await http.post(
        Uri.parse('$baseUrl/api/reportes/generar'),
        headers: headers,
        body: jsonEncode(parametros),
      );

      print('üîó Generando reporte en: $baseUrl/api/reportes/generar');
      print('üìå Status: ${response.statusCode}');
      print('üìã Content-Type: ${response.headers['content-type']}');
      print('üìä Body length: ${response.bodyBytes.length} bytes');
      print('üìÑ Primeros 200 caracteres del body: ${response.body.length > 200 ? response.body.substring(0, 200) : response.body}');

      if (response.statusCode == 200) {
        // Si la respuesta contiene bytes del archivo (Excel/CSV), descargar directamente
        final contentType = response.headers['content-type'] ?? '';
        
        if (contentType.contains('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') ||
            contentType.contains('text/csv') ||
            response.bodyBytes.isNotEmpty && response.bodyBytes.length > 1000) {
          
          print('üì• Respuesta contiene archivo, iniciando descarga...');
          
          // Determinar el formato basado en los par√°metros o content-type
          final tipoReporte = parametros['tipo_reporte']?.toString().toLowerCase() ?? 'excel';
          final extension = tipoReporte == 'csv' ? 'csv' : 'xlsx';
          final mimeType = tipoReporte == 'csv' 
              ? 'text/csv' 
              : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
          
          final timestamp = DateTime.now().millisecondsSinceEpoch;
          final filename = 'reporte_$timestamp.$extension';
          
        if (kIsWeb) {
          await _descargarArchivoWeb(response.bodyBytes, filename, mimeType);
          return 'Archivo descargado en el navegador';
        } else {
          // Para m√≥vil, verificar permisos y guardar en el directorio de descargas
          final hasPermissions = await PermissionService.requestStoragePermissions();
          if (!hasPermissions) {
            throw Exception('Se requieren permisos de almacenamiento para descargar el archivo. Por favor, habilita los permisos en la configuraci√≥n de la aplicaci√≥n.');
          }
          
          final downloadsDir = await _obtenerDirectorioDescargas();
          final file = File('${downloadsDir.path}/$filename');
          await file.writeAsBytes(response.bodyBytes);
          print('‚úÖ Reporte guardado en: ${file.path}');
          
          return file.path;
        }
        } else {
          print('‚úÖ Reporte generado exitosamente (sin descarga directa)');
          return null;
        }
      } else {
        throw Exception('Error al generar reporte. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en generarReporte: $e');
      throw Exception('Error al generar reporte: $e');
    }
  }

  // --- CRONOGRAMAS (SUPERVISOR) ---
  Future<List<Map<String, dynamic>>> getCronogramas() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/cronogramas'),
        headers: headers,
      );

      print('üîó Obteniendo cronogramas desde: $baseUrl/api/cronogramas');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.cast<Map<String, dynamic>>();
      } else {
        // Mock data para desarrollo
        return [
          {
            'id': 1,
            'operador': 'Operador A',
            'contrato': 'CON-2024-001',
            'fecha_inicio': '2024-01-01T00:00:00Z',
            'fecha_fin': '2024-12-31T00:00:00Z',
            'estado': 'activo',
            'visitas_programadas': 50,
            'visitas_completadas': 35,
          },
          {
            'id': 2,
            'operador': 'Operador B',
            'contrato': 'CON-2024-002',
            'fecha_inicio': '2024-02-01T00:00:00Z',
            'fecha_fin': '2024-11-30T00:00:00Z',
            'estado': 'pendiente',
            'visitas_programadas': 30,
            'visitas_completadas': 0,
          },
        ];
      }
    } catch (e) {
      print('‚ùå Error en getCronogramas: $e');
      // Mock data para desarrollo
      return [
        {
          'id': 1,
          'operador': 'Operador A',
          'contrato': 'CON-2024-001',
          'fecha_inicio': '2024-01-01T00:00:00Z',
          'fecha_fin': '2024-12-31T00:00:00Z',
          'estado': 'activo',
          'visitas_programadas': 50,
          'visitas_completadas': 35,
        },
        {
          'id': 2,
          'operador': 'Operador B',
          'contrato': 'CON-2024-002',
          'fecha_inicio': '2024-02-01T00:00:00Z',
          'fecha_fin': '2024-11-30T00:00:00Z',
          'estado': 'pendiente',
          'visitas_programadas': 30,
          'visitas_completadas': 0,
        },
      ];
    }
  }

  // --- ACTIVIDAD RECIENTE (SUPERVISOR) ---
  Future<List<Visita>> getUltimasVisitas() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/visitas/ultimas'),
        headers: headers,
      );

      print('üîó Obteniendo √∫ltimas visitas desde: $baseUrl/api/visitas/ultimas');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Visita.fromJson(json)).toList();
      } else {
        throw Exception('Error al cargar √∫ltimas visitas. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getUltimasVisitas: $e');
      throw Exception('Error al cargar √∫ltimas visitas: $e');
    }
  }

  Future<List<Visita>> getVisitasSinEvidencia() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/visitas/sin-evidencia'),
        headers: headers,
      );

      print('üîó Obteniendo visitas sin evidencia desde: $baseUrl/api/visitas/sin-evidencia');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Visita.fromJson(json)).toList();
      } else {
        throw Exception('Error al cargar visitas sin evidencia. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getVisitasSinEvidencia: $e');
      throw Exception('Error al cargar visitas sin evidencia: $e');
    }
  }

  Future<Map<String, dynamic>> getEstadisticasActividad() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/dashboard/actividad'),
        headers: headers,
      );

      print('üîó Obteniendo estad√≠sticas de actividad desde: $baseUrl/api/dashboard/actividad');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        // El endpoint devuelve {ultimas_visitas: [...], estadisticas: {...}}
        return data;
      } else {
        // Mock data para desarrollo
        return {
          'ultimas_visitas': [],
          'estadisticas': {
            'total_visitas': 150,
            'visitas_hoy': 5,
            'usuarios_activos': 10,
          }
        };
      }
    } catch (e) {
      print('‚ùå Error en getEstadisticasActividad: $e');
      // Mock data para desarrollo
      return {
        'ultimas_visitas': [],
        'estadisticas': {
          'total_visitas': 150,
          'visitas_hoy': 5,
          'usuarios_activos': 10,
        }
      };
    }
  }

  // --- GESTI√ìN DE USUARIOS (SUPERVISOR) ---
  Future<List<Usuario>> getTodosUsuarios() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/admin/usuarios'),
        headers: headers,
      );

      print('üîó Obteniendo todos los usuarios desde: $baseUrl/api/admin/usuarios');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('üìÑ Response body: ${response.body}');
        print('üìä Datos JSON recibidos: $data');
        
        final usuarios = data.map((json) => Usuario.fromJson(json)).toList();
        print('üë• Usuarios parseados: ${usuarios.map((u) => '${u.nombre} (${u.rol})').toList()}');
        
        return usuarios;
      } else {
        throw Exception('Error al cargar usuarios. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getTodosUsuarios: $e');
      throw Exception('Error al cargar usuarios: $e');
    }
  }

  // --- NOTIFICACIONES SUPERVISOR ---
  Future<List<Map<String, dynamic>>> getAlertasSistema() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/alertas/sistema'),
        headers: headers,
      );

      print('üîó Obteniendo alertas del sistema desde: $baseUrl/api/alertas/sistema');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.cast<Map<String, dynamic>>();
      } else {
        // Mock data para desarrollo
        return [
          {
            'titulo': 'Sistema funcionando correctamente',
            'mensaje': 'Todos los servicios est√°n operativos',
            'prioridad': 'baja',
            'fecha': DateTime.now().toIso8601String(),
          },
        ];
      }
    } catch (e) {
      print('‚ùå Error en getAlertasSistema: $e');
      // Mock data para desarrollo
      return [
        {
          'titulo': 'Sistema funcionando correctamente',
          'mensaje': 'Todos los servicios est√°n operativos',
          'prioridad': 'baja',
          'fecha': DateTime.now().toIso8601String(),
        },
      ];
    }
  }

  Future<List<Map<String, dynamic>>> getInconsistenciasDatos() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/alertas/inconsistencias'),
        headers: headers,
      );

      print('üîó Obteniendo inconsistencias desde: $baseUrl/api/alertas/inconsistencias');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.cast<Map<String, dynamic>>();
      } else {
        // Mock data para desarrollo
        return [
          {
            'titulo': 'Visita sin evidencia fotogr√°fica',
            'mensaje': 'La visita #123 no tiene fotos adjuntas',
            'prioridad': 'alta',
            'fecha': DateTime.now().subtract(const Duration(hours: 2)).toIso8601String(),
          },
        ];
      }
    } catch (e) {
      print('‚ùå Error en getInconsistenciasDatos: $e');
      // Mock data para desarrollo
      return [
        {
          'titulo': 'Visita sin evidencia fotogr√°fica',
          'mensaje': 'La visita #123 no tiene fotos adjuntas',
          'prioridad': 'alta',
          'fecha': DateTime.now().subtract(const Duration(hours: 2)).toIso8601String(),
        },
      ];
    }
  }

  Future<List<Map<String, dynamic>>> getVencimientosCronogramas() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/alertas/vencimientos'),
        headers: headers,
      );

      print('üîó Obteniendo vencimientos desde: $baseUrl/api/alertas/vencimientos');
      print('üìå Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.cast<Map<String, dynamic>>();
      } else {
        // Mock data para desarrollo
        return [
          {
            'titulo': 'Cronograma pr√≥ximo a vencer',
            'mensaje': 'El cronograma #2 vence en 5 d√≠as',
            'prioridad': 'media',
            'fecha': DateTime.now().subtract(const Duration(days: 1)).toIso8601String(),
          },
        ];
      }
    } catch (e) {
      print('‚ùå Error en getVencimientosCronogramas: $e');
      // Mock data para desarrollo
      return [
        {
          'titulo': 'Cronograma pr√≥ximo a vencer',
          'mensaje': 'El cronograma #2 vence en 5 d√≠as',
          'prioridad': 'media',
          'fecha': DateTime.now().subtract(const Duration(days: 1)).toIso8601String(),
        },
      ];
    }
  }



  // --- VISITAS COMPLETAS PAE ---
  Future<List<Visita>> getVisitasCompletas({
    String? contrato,
    String? operador,
    int? municipioId,
    int? institucionId,
    String? estado,
    String? fechaInicio,
    String? fechaFin,
    bool soloDelUsuario = false, // Nuevo par√°metro para filtrar por usuario
  }) async {
    try {
      final headers = await _getHeaders();
      
      // Construir query parameters
      final queryParams = <String, String>{};
      if (contrato != null && contrato.isNotEmpty) queryParams['contrato'] = contrato;
      if (operador != null && operador.isNotEmpty) queryParams['operador'] = operador;
      if (municipioId != null) queryParams['municipio_id'] = municipioId.toString();
      if (institucionId != null) queryParams['institucion_id'] = institucionId.toString();
      if (estado != null && estado.isNotEmpty) queryParams['estado'] = estado;
      if (fechaInicio != null && fechaInicio.isNotEmpty) queryParams['fecha_inicio'] = fechaInicio;
      if (fechaFin != null && fechaFin.isNotEmpty) queryParams['fecha_fin'] = fechaFin;
      
      // Si se solicita solo del usuario, agregar el filtro
      if (soloDelUsuario) {
        final usuarioId = await getUsuarioId();
        if (usuarioId != null) {
          queryParams['usuario_id'] = usuarioId.toString();
        }
      }
      
      final uri = Uri.parse('$baseUrl/api/visitas-completas-pae').replace(
        queryParameters: queryParams,
      );
      
      final response = await http.get(uri, headers: headers);

      print('üîó Obteniendo visitas completas desde: $uri');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Visita.fromJson(json)).toList();
      } else {
        throw Exception('Error al cargar visitas completas. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getVisitasCompletas: $e');
      throw Exception('Error al cargar visitas completas: $e');
    }
  }

  // --- OPCIONES DE FILTROS PARA VISITAS COMPLETAS ---
  Future<Map<String, List<String>>> getOpcionesFiltrosVisitas() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/visitas-completas-pae/filtros'),
        headers: headers,
      );

      print('üîó Obteniendo opciones de filtros desde: $baseUrl/api/visitas-completas-pae/filtros');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(response.body);
        return {
          'contratos': List<String>.from(data['contratos'] ?? []),
          'operadores': List<String>.from(data['operadores'] ?? []),
          'estados': List<String>.from(data['estados'] ?? []),
        };
      } else {
        throw Exception('Error al cargar opciones de filtros. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getOpcionesFiltrosVisitas: $e');
      throw Exception('Error al cargar opciones de filtros: $e');
    }
  }

  // --- VISITAS PENDIENTES PAE ---
  Future<List<Visita>> getVisitasPendientes() async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/visitas-completas-pae/pendientes'),
        headers: headers,
      );

      print('üîó Obteniendo visitas pendientes desde: $baseUrl/api/visitas-completas-pae/pendientes');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Visita.fromJson(json)).toList();
      } else {
        throw Exception('Error al cargar visitas pendientes. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en getVisitasPendientes: $e');
      throw Exception('Error al cargar visitas pendientes: $e');
    }
  }

  // --- ACTUALIZAR ESTADO DE VISITA ---
  Future<bool> actualizarEstadoVisita(int visitaId, String estado) async {
    try {
      final headers = await _getHeaders();
      final response = await http.put(
        Uri.parse('$baseUrl/api/visitas-completas-pae/$visitaId/estado?estado=$estado'),
        headers: headers,
      );

      print('üîó Actualizando estado de visita $visitaId a $estado');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå Error en actualizarEstadoVisita: $e');
      throw Exception('Error al actualizar estado de visita: $e');
    }
  }

  // --- DESCARGAR EXCEL DE VISITA COMPLETA ---
  Future<String?> descargarExcelVisita(int visitaId) async {
    try {
      final headers = await _getHeaders();
      final response = await http.get(
        Uri.parse('$baseUrl/api/visitas-completas-pae/$visitaId/excel'),
        headers: headers,
      );

      print('üîó Descargando Excel para visita $visitaId desde: $baseUrl/api/visitas-completas-pae/$visitaId/excel');
      print('üìå Status: ${response.statusCode}');
      print('üìå Content-Type: ${response.headers['content-type']}');
      print('üìå Content-Length: ${response.bodyBytes.length} bytes');

      if (response.statusCode == 200) {
        // Crear el archivo Excel en el directorio de descargas
        final bytes = response.bodyBytes;
        final filename = 'visita_${visitaId}_${DateTime.now().millisecondsSinceEpoch}.xlsx';
        
        // En Flutter m√≥vil, guardamos el archivo en el directorio de descargas
        if (!kIsWeb && (Platform.isAndroid || Platform.isIOS)) {
          // Verificar y solicitar permisos de almacenamiento
          final hasPermissions = await PermissionService.requestStoragePermissions();
          if (!hasPermissions) {
            throw Exception('Se requieren permisos de almacenamiento para descargar el archivo. Por favor, habilita los permisos en la configuraci√≥n de la aplicaci√≥n.');
          }
          
          // Obtener directorio de descargas usando el m√©todo mejorado
          final downloadsDir = await _obtenerDirectorioDescargas();
          final file = File('${downloadsDir.path}/$filename');
          await file.writeAsBytes(bytes);
          print('‚úÖ Excel guardado en: ${file.path}');
          return file.path;
        } else if (kIsWeb) {
          // Para Flutter web, usar un enfoque directo
          print('üåê Descargando Excel en Flutter web...');
          
          try {
            await _descargarExcelWeb(bytes, filename);
            print('‚úÖ Excel descargado en Flutter web: $filename');
            return filename;
          } catch (e) {
            print('‚ùå Error al descargar Excel en web: $e');
            throw Exception('Error al descargar Excel en web: $e');
          }
        } else {
          // Para otras plataformas
          print('‚ö†Ô∏è Descarga de Excel no implementada para esta plataforma');
          return null;
        }
      } else {
        throw Exception('Error al descargar Excel. C√≥digo: ${response.statusCode}, Respuesta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en descargarExcelVisita: $e');
      throw Exception('Error al descargar Excel: $e');
    }
  }

  // --- RECUPERACI√ìN DE CONTRASE√ëA ---
  
  // Enviar c√≥digo de recuperaci√≥n por email
  Future<void> enviarCodigoRecuperacion(String email) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/api/auth/olvidaste-contrasena'),
        headers: {'Content-Type': 'application/json; charset=UTF-8'},
        body: jsonEncode({'correo': email}),
      );

      print('üîó Enviando c√≥digo de recuperaci√≥n a: $email');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ C√≥digo de recuperaci√≥n enviado exitosamente');
        return;
      } else {
        throw Exception('Error al enviar c√≥digo de recuperaci√≥n: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexi√≥n: $e');
    }
  }

  // Verificar c√≥digo de recuperaci√≥n
  Future<void> verificarCodigoRecuperacion(String email, String codigo) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/api/auth/verificar-codigo'),
        headers: {'Content-Type': 'application/json; charset=UTF-8'},
        body: jsonEncode({
          'correo': email,
          'codigo': codigo,
        }),
      );

      print('üîó Verificando c√≥digo de recuperaci√≥n para: $email');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ C√≥digo de recuperaci√≥n verificado exitosamente');
        return;
      } else {
        throw Exception('Error al verificar c√≥digo: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexi√≥n: $e');
    }
  }

  // Cambiar contrase√±a con c√≥digo de verificaci√≥n
  Future<void> cambiarContrasenaConCodigo(String email, String codigo, String nuevaContrasena) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/api/auth/cambiar-contrasena'),
        headers: {'Content-Type': 'application/json; charset=UTF-8'},
        body: jsonEncode({
          'correo': email,
          'codigo': codigo,
          'nueva_contrasena': nuevaContrasena,
        }),
      );

      print('üîó Cambiando contrase√±a para: $email');
      print('üìå Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Contrase√±a cambiada exitosamente');
        return;
      } else {
        throw Exception('Error al cambiar contrase√±a: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexi√≥n: $e');
    }
  }

  // --- VISITAS PROGRAMADAS ---
  
  // Obtener visitas programadas del visitador actual
  Future<List<VisitaProgramada>> getVisitasProgramadasVisitador() async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final url = '$baseUrl/api/visitas-programadas/visitador';
      print('üîó Obteniendo visitas programadas del visitador');
      print('üîë Headers: $headers');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => VisitaProgramada.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener visitas programadas: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getVisitasProgramadasVisitador: $e');
      throw Exception('Error al obtener visitas programadas: $e');
    }
  }

  // Obtener todas las visitas programadas (para supervisores)
  Future<List<VisitaProgramada>> getTodasVisitasProgramadas() async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final url = '$baseUrl/api/visitas-programadas';
      print('üîó Obteniendo todas las visitas programadas');
      print('üîë Headers: $headers');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => VisitaProgramada.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener visitas programadas: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getTodasVisitasProgramadas: $e');
      throw Exception('Error al obtener visitas programadas: $e');
    }
  }

  // Obtener visitas programadas del visitador actual
  Future<List<VisitaProgramada>> getMisVisitasProgramadas() async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final url = '$baseUrl/api/visitas-programadas/mis-visitas';
      print('üîó Obteniendo mis visitas programadas');
      print('üîë Headers: $headers');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => VisitaProgramada.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener mis visitas programadas: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getMisVisitasProgramadas: $e');
      throw Exception('Error al obtener mis visitas programadas: $e');
    }
  }

  // Asignar visita a visitador (para supervisores) - Versi√≥n con par√°metros individuales
  Future<bool> asignarVisitaAVisitador({
    required String contrato,
    required String operador,
    required DateTime fechaProgramada,
    required int municipioId,
    required int institucionId,
    required int sedeId,
    required int visitadorId,
  }) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final body = {
        'sede_id': sedeId,
        'visitador_id': visitadorId,
        'fecha_programada': fechaProgramada.toIso8601String(),
        'tipo_visita': 'PAE',
        'prioridad': 'normal',
        'contrato': contrato,
        'operador': operador,
        'municipio_id': municipioId,
        'institucion_id': institucionId,
        'observaciones': '',
      };

      final url = '$baseUrl/api/visitas-asignadas';
      print('üîó Asignando visita a visitador');
      print('üîë Headers: $headers');
      print('üì¶ Body: $body');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: jsonEncode(body),
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      return response.statusCode == 201;
    } catch (e) {
      print('‚ùå Error en asignarVisitaAVisitador: $e');
      throw Exception('Error al asignar visita: $e');
    }
  }

  // Asignar visita a visitador (para supervisores) - Versi√≥n con Map
  Future<bool> asignarVisitaConMap(Map<String, dynamic> visitaProgramada) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final body = jsonEncode(visitaProgramada);

      final url = '$baseUrl/api/visitas-asignadas';
      print('üîó Asignando visita con Map');
      print('üîë Headers: $headers');
      print('üì¶ Body: $body');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: body,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      return response.statusCode == 201;
    } catch (e) {
      print('‚ùå Error en asignarVisitaConMap: $e');
      throw Exception('Error al asignar visita: $e');
    }
  }

  // Actualizar estado de visita programada
  Future<bool> actualizarEstadoVisitaProgramada(int visitaId, String nuevoEstado) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final body = jsonEncode({
        'estado': nuevoEstado,
      });

      final url = '$baseUrl/api/visitas-programadas/$visitaId/estado';
      print('üîó Actualizando estado de visita programada: $visitaId');
      print('üîë Headers: $headers');
      print('üì¶ Body: $body');

      final response = await http.patch(
        Uri.parse(url),
        headers: headers,
        body: body,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå Error en actualizarEstadoVisitaProgramada: $e');
      throw Exception('Error al actualizar estado de visita programada: $e');
    }
  }

  // --- M√âTODOS PARA VISITAS ASIGNADAS ---

  // Obtener mis visitas asignadas (para visitadores)
  Future<List<Map<String, dynamic>>> getMisVisitasAsignadas({String? estado}) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      String url = '$baseUrl/api/visitas-asignadas/mis-visitas';
      if (estado != null) {
        url += '?estado=$estado';
      }
      
      print('üîó Obteniendo mis visitas asignadas - Estado: $estado');
      print('üîë Headers: $headers');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        final visitas = data.map((json) => Map<String, dynamic>.from(json)).toList();
        print('‚úÖ Visitas asignadas obtenidas: ${visitas.length}');
        return visitas;
      } else {
        throw Exception('Error al obtener mis visitas asignadas: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getMisVisitasAsignadas: $e');
      throw Exception('Error al obtener mis visitas asignadas: $e');
    }
  }

  // Actualizar estado de visita asignada
  Future<Map<String, dynamic>> actualizarEstadoVisitaAsignada(
    int visitaId, {
    String? estado,
    DateTime? fechaInicio,
    DateTime? fechaCompletada,
    String? observaciones,
  }) async {
    try {
      final token = await getToken();
      final headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': 'Bearer $token',
      };

      final Map<String, dynamic> datos = {};
      if (estado != null) datos['estado'] = estado;
      if (fechaInicio != null) datos['fecha_inicio'] = fechaInicio.toIso8601String();
      if (fechaCompletada != null) datos['fecha_completada'] = fechaCompletada.toIso8601String();
      if (observaciones != null) datos['observaciones'] = observaciones;

      final body = jsonEncode(datos);

      final url = '$baseUrl/api/visitas-asignadas/$visitaId/estado';
      print('üîó Actualizando estado de visita asignada: $visitaId');
      print('üîë Headers: $headers');
      print('üì¶ Body: $body');

      final response = await http.put(
        Uri.parse(url),
        headers: headers,
        body: body,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Estado de visita asignada actualizado: $estado');
        return Map<String, dynamic>.from(data);
      } else {
        throw Exception('Error al actualizar estado de visita asignada: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en actualizarEstadoVisitaAsignada: $e');
      throw Exception('Error al actualizar estado de visita asignada: $e');
    }
  }

  // Obtener todas las visitas del usuario (asignadas + completas) para el calendario
  Future<List<Map<String, dynamic>>> getTodasVisitasUsuario() async {
    try {
      // Obtener visitas asignadas (que son las que realmente existen)
      final visitasAsignadas = await getMisVisitasAsignadas();
      
      print('üìÖ DEBUG: Total visitas asignadas obtenidas: ${visitasAsignadas.length}');
      
      // Convertir al formato esperado por el calendario
      final visitasFormateadas = visitasAsignadas.map((visita) => {
        'id': visita['id'],
        'sede_id': visita['sede_id'],
        'sede_nombre': visita['sede_nombre'],
        'visitador_id': visita['visitador_id'],
        'visitador_nombre': visita['visitador_nombre'],
        'fecha_programada': visita['fecha_programada'],
        'contrato': visita['contrato'] ?? '',
        'operador': visita['operador'] ?? '',
        'observaciones': visita['observaciones'] ?? '',
        'estado': visita['estado'],
        'municipio_id': visita['municipio_id'],
        'municipio_nombre': visita['municipio_nombre'] ?? '',
        'institucion_id': visita['institucion_id'],
        'institucion_nombre': visita['institucion_nombre'] ?? '',
        'fecha_creacion': visita['fecha_creacion'] ?? DateTime.now().toIso8601String(),
      }).toList();
      
      return visitasFormateadas;
    } catch (e) {
      print('‚ùå Error en getTodasVisitasUsuario: $e');
      return [];
    }
  }

  String _timeOfDayToIso8601String(TimeOfDay time) {
    final now = DateTime.now();
    final dateTime = DateTime(now.year, now.month, now.day, time.hour, time.minute);
    return dateTime.toIso8601String();
  }

  // Obtener casos de atenci√≥n prioritaria
  Future<List<Map<String, dynamic>>> getCasosAtencionPrioritaria() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/api/casos-atencion-prioritaria'),
        headers: await _getHeaders(),
      );
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.cast<Map<String, dynamic>>();
      } else {
        print('‚ùå Error al obtener casos de atenci√≥n prioritaria: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('‚ùå Error en getCasosAtencionPrioritaria: $e');
      return [];
    }
  }

  // --- M√âTODOS DE NOTIFICACIONES PUSH ---

  /// Registra un dispositivo para notificaciones push
  Future<Map<String, dynamic>> registrarDispositivoNotificacion({
    required String token,
    required String plataforma,
  }) async {
    try {
      final url = '$baseUrl/api/notificaciones/dispositivos/registrar';
      final headers = await _getHeaders();
      
      final body = jsonEncode({
        'token_dispositivo': token,
        'plataforma': plataforma,
      });

      print('üîó Registrando dispositivo para notificaciones: $plataforma');
      print('üì¶ Body: $body');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: body,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Dispositivo registrado exitosamente');
        return Map<String, dynamic>.from(data);
      } else {
        throw Exception('Error al registrar dispositivo: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en registrarDispositivoNotificacion: $e');
      throw Exception('Error al registrar dispositivo: $e');
    }
  }

  /// Desactiva un dispositivo para notificaciones
  Future<bool> desactivarDispositivoNotificacion(String token) async {
    try {
      final url = '$baseUrl/api/notificaciones/dispositivos/desactivar/$token';
      final headers = await _getHeaders();

      print('üîó Desactivando dispositivo: ${token.substring(0, 20)}...');

      final response = await http.delete(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        print('‚úÖ Dispositivo desactivado exitosamente');
        return true;
      } else {
        throw Exception('Error al desactivar dispositivo: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en desactivarDispositivoNotificacion: $e');
      throw Exception('Error al desactivar dispositivo: $e');
    }
  }

  /// Obtiene las notificaciones del usuario
  Future<List<Map<String, dynamic>>> getNotificacionesUsuario({
    int limit = 50,
    int offset = 0,
  }) async {
    try {
      final url = '$baseUrl/api/notificaciones/usuario?limit=$limit&offset=$offset';
      final headers = await _getHeaders();

      print('üîó Obteniendo notificaciones del usuario');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('‚úÖ Notificaciones obtenidas: ${data.length}');
        return data.cast<Map<String, dynamic>>();
      } else {
        throw Exception('Error al obtener notificaciones: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getNotificacionesUsuario: $e');
      throw Exception('Error al obtener notificaciones: $e');
    }
  }

  /// Marca una notificaci√≥n como le√≠da
  Future<bool> marcarNotificacionLeida(int notificacionId) async {
    try {
      final url = '$baseUrl/api/notificaciones/$notificacionId/leer';
      final headers = await _getHeaders();

      print('üîó Marcando notificaci√≥n como le√≠da: $notificacionId');

      final response = await http.put(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        print('‚úÖ Notificaci√≥n marcada como le√≠da');
        return true;
      } else {
        throw Exception('Error al marcar notificaci√≥n como le√≠da: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en marcarNotificacionLeida: $e');
      throw Exception('Error al marcar notificaci√≥n como le√≠da: $e');
    }
  }

  /// Obtiene estad√≠sticas de notificaciones
  Future<Map<String, dynamic>> getEstadisticasNotificaciones() async {
    try {
      final url = '$baseUrl/api/notificaciones/estadisticas';
      final headers = await _getHeaders();

      print('üîó Obteniendo estad√≠sticas de notificaciones');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Estad√≠sticas obtenidas');
        return Map<String, dynamic>.from(data);
      } else {
        throw Exception('Error al obtener estad√≠sticas: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getEstadisticasNotificaciones: $e');
      throw Exception('Error al obtener estad√≠sticas: $e');
    }
  }

  /// Env√≠a una notificaci√≥n push (solo para administradores/supervisores)
  Future<Map<String, dynamic>> enviarNotificacionPush({
    required String titulo,
    required String mensaje,
    required String tipo,
    required List<int> usuarioIds,
    String prioridad = 'normal',
    Map<String, dynamic>? datosAdicionales,
  }) async {
    try {
      final url = '$baseUrl/api/notificaciones/enviar';
      final headers = await _getHeaders();
      
      final body = jsonEncode({
        'titulo': titulo,
        'mensaje': mensaje,
        'tipo': tipo,
        'prioridad': prioridad,
        'usuario_ids': usuarioIds,
        'datos_adicionales': datosAdicionales,
      });

      print('üîó Enviando notificaci√≥n push a ${usuarioIds.length} usuarios');
      print('üì¶ Body: $body');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: body,
      );

      print('üìå Respuesta del servidor - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Notificaci√≥n push enviada exitosamente');
        return Map<String, dynamic>.from(data);
      } else {
        throw Exception('Error al enviar notificaci√≥n push: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en enviarNotificacionPush: $e');
      throw Exception('Error al enviar notificaci√≥n push: $e');
    }
  }

  /// Sincroniza las visitas programadas con las visitas completas PAE
  Future<bool> sincronizarVisitasProgramadas() async {
    try {
      final url = '$baseUrl/api/sincronizar-visitas-programadas';
      final headers = await _getHeaders();
      
      print('üîÑ Sincronizando visitas programadas...');
      print('üîó URL: $url');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta de sincronizaci√≥n - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Sincronizaci√≥n exitosa: ${data['mensaje']}');
        print('üìä Visitas actualizadas: ${data['visitas_actualizadas']}');
        return true;
      } else {
        print('‚ùå Error en sincronizaci√≥n: ${response.statusCode} - ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå Error en sincronizarVisitasProgramadas: $e');
      
      // Verificar si es un error de autenticaci√≥n
      if (e.toString().contains('401') || e.toString().contains('Unauthorized')) {
        print('üîê Error de autenticaci√≥n en sincronizaci√≥n. Limpiando token...');
        await logout(); // Limpiar token expirado
        throw Exception('Sesi√≥n expirada durante la sincronizaci√≥n. Por favor, inicia sesi√≥n nuevamente.');
      }
      
      return false;
    }
  }

  /// Sincroniza TODAS las visitas del usuario (asignadas, completas, programadas)
  Future<bool> sincronizarTodasLasVisitas() async {
    try {
      print('üîÑ === INICIANDO SINCRONIZAR TODAS LAS VISITAS ===');
      final url = '$baseUrl/api/sincronizar-todas-las-visitas';
      final headers = await _getHeaders();
      
      print('üîÑ Sincronizando TODAS las visitas...');
      print('üîó URL: $url');
      print('üîë Headers: $headers');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta de sincronizaci√≥n completa - Status: ${response.statusCode}');
      print('üìå Body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Sincronizaci√≥n completa exitosa: ${data['mensaje']}');
        print('üìä Visitas sincronizadas: ${data['visitas_sincronizadas']}');
        print('üîÑ === FIN SINCRONIZAR TODAS LAS VISITAS ===');
        return true;
      } else {
        print('‚ùå Error en sincronizaci√≥n completa: ${response.statusCode} - ${response.body}');
        print('üîÑ === FIN SINCRONIZAR TODAS LAS VISITAS (ERROR) ===');
        return false;
      }
    } catch (e) {
      print('‚ùå Error en sincronizarTodasLasVisitas: $e');
      print('‚ùå Stack trace: ${StackTrace.current}');
      
      // Verificar si es un error de autenticaci√≥n
      if (e.toString().contains('401') || e.toString().contains('Unauthorized')) {
        print('üîê Error de autenticaci√≥n en sincronizaci√≥n. Limpiando token...');
        await logout(); // Limpiar token expirado
        throw Exception('Sesi√≥n expirada durante la sincronizaci√≥n. Por favor, inicia sesi√≥n nuevamente.');
      }
      
      print('üîÑ === FIN SINCRONIZAR TODAS LAS VISITAS (EXCEPTION) ===');
      return false;
    }
  }

  /// Funci√≥n auxiliar para descargar Excel en Flutter web
  Future<void> _descargarExcelWeb(List<int> bytes, String filename) async {
    return _descargarArchivoWeb(bytes, filename, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  }

  /// Funci√≥n auxiliar gen√©rica para descargar archivos en Flutter web
  Future<void> _descargarArchivoWeb(List<int> bytes, String filename, String mimeType) async {
    if (kIsWeb) {
      try {
        print('üåê Descargando archivo en Flutter web...');
        print('üìÑ Archivo: $filename');
        print('üîñ Tipo MIME: $mimeType');
        print('üìä Tama√±o: ${bytes.length} bytes');
        
        // Usar la clase de compatibilidad
        await PlatformCompat.downloadFile(bytes, filename, mimeType);
        print('‚úÖ Descarga iniciada: $filename');
      } catch (e) {
        print('‚ùå Error al descargar archivo en web: $e');
        throw Exception('Error al descargar archivo en web: $e');
      }
    } else {
      throw Exception('Esta funci√≥n solo est√° disponible en Flutter web');
    }
  }

  // --- M√âTODOS DEL SUPERVISOR ---

  /// Obtiene estad√≠sticas espec√≠ficas del supervisor
  Future<Map<String, dynamic>> getEstadisticasSupervisor() async {
    try {
      final url = '$baseUrl/api/dashboard/supervisor/estadisticas';
      final headers = await _getHeaders();
      
      print('üìä Obteniendo estad√≠sticas del supervisor...');
      print('üîó URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta estad√≠sticas supervisor - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Estad√≠sticas del supervisor obtenidas exitosamente');
        return Map<String, dynamic>.from(data);
      } else {
        throw Exception('Error al obtener estad√≠sticas: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getEstadisticasSupervisor: $e');
      throw Exception('Error al obtener estad√≠sticas del supervisor: $e');
    }
  }

  /// Obtiene visitas del equipo del supervisor
  Future<List<Map<String, dynamic>>> getVisitasEquipo() async {
    try {
      final url = '$baseUrl/api/supervisor/visitas-equipo';
      final headers = await _getHeaders();
      
      print('üë• Obteniendo visitas del equipo...');
      print('üîó URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta visitas equipo - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Visitas del equipo obtenidas exitosamente');
        return List<Map<String, dynamic>>.from(data);
      } else {
        throw Exception('Error al obtener visitas del equipo: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getVisitasEquipo: $e');
      throw Exception('Error al obtener visitas del equipo: $e');
    }
  }

  /// Obtiene visitadores del equipo del supervisor
  Future<List<Map<String, dynamic>>> getVisitadoresEquipo() async {
    try {
      final url = '$baseUrl/api/admin/visitadores';
      final headers = await _getHeaders();
      
      print('üë• Obteniendo visitadores del equipo...');
      print('üîó URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta visitadores equipo - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Visitadores del equipo obtenidos exitosamente');
        return List<Map<String, dynamic>>.from(data);
      } else {
        throw Exception('Error al obtener visitadores del equipo: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getVisitadoresEquipo: $e');
      throw Exception('Error al obtener visitadores del equipo: $e');
    }
  }

  /// Obtiene sedes disponibles para asignar visitas
  Future<List<Map<String, dynamic>>> getSedesDisponibles() async {
    try {
      final url = '$baseUrl/api/admin/sedes';
      final headers = await _getHeaders();
      
      print('üè´ Obteniendo sedes disponibles...');
      print('üîó URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta sedes disponibles - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Sedes disponibles obtenidas exitosamente');
        return List<Map<String, dynamic>>.from(data);
      } else {
        throw Exception('Error al obtener sedes disponibles: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getSedesDisponibles: $e');
      throw Exception('Error al obtener sedes disponibles: $e');
    }
  }

  /// Obtiene tipos de visita disponibles
  Future<List<Map<String, dynamic>>> getTiposVisita() async {
    try {
      final url = '$baseUrl/api/admin/tipos-visita';
      final headers = await _getHeaders();
      
      print('üìã Obteniendo tipos de visita...');
      print('üîó URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta tipos visita - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Tipos de visita obtenidos exitosamente');
        return List<Map<String, dynamic>>.from(data);
      } else {
        throw Exception('Error al obtener tipos de visita: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getTiposVisita: $e');
      throw Exception('Error al obtener tipos de visita: $e');
    }
  }

  /// Asigna una visita a un visitador
  Future<void> asignarVisita(Map<String, dynamic> datosVisita) async {
    try {
      final url = '$baseUrl/api/supervisor/asignar-visita';
      final headers = await _getHeaders();
      
      print('üìù Asignando visita...');
      print('üîó URL: $url');
      print('üìä Datos: $datosVisita');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: jsonEncode(datosVisita),
      );

      print('üìå Respuesta asignar visita - Status: ${response.statusCode}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        print('‚úÖ Visita asignada exitosamente');
        print('üìÑ Respuesta: ${response.body}');
      } else {
        print('‚ùå Error del servidor: ${response.statusCode}');
        print('üìÑ Respuesta: ${response.body}');
        throw Exception('Error al asignar visita: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('‚ùå Error en asignarVisita: $e');
      throw Exception('Error al asignar visita: $e');
    }
  }

  /// Genera un reporte del equipo
  Future<Map<String, dynamic>> generarReporteEquipo(Map<String, dynamic> filtros) async {
    try {
      final url = '$baseUrl/api/supervisor/generar-reporte-equipo';
      final headers = await _getHeaders();
      
      print('üìä Generando reporte del equipo...');
      print('üîó URL: $url');
      print('üîç Filtros: $filtros');

      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: jsonEncode(filtros),
      );

      print('üìå Respuesta generar reporte - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Reporte del equipo generado exitosamente');
        return Map<String, dynamic>.from(data);
      } else {
        throw Exception('Error al generar reporte: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en generarReporteEquipo: $e');
      throw Exception('Error al generar reporte del equipo: $e');
    }
  }

  /// Descarga un reporte del equipo
  Future<void> descargarReporteEquipo(int reporteId) async {
    try {
      final url = '$baseUrl/api/supervisor/descargar-reporte-equipo/$reporteId';
      final headers = await _getHeaders();
      
      print('üì• Descargando reporte del equipo...');
      print('üîó URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta descargar reporte - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final bytes = response.bodyBytes;
        final filename = 'reporte_equipo_$reporteId.xlsx';
        
        if (kIsWeb) {
          await _descargarExcelWeb(bytes, filename);
        } else {
          // Para m√≥vil, guardar en el dispositivo
          final directory = await getApplicationDocumentsDirectory();
          final file = File('${directory.path}/$filename');
          await file.writeAsBytes(bytes);
          print('‚úÖ Reporte guardado en: ${file.path}');
        }
      } else {
        throw Exception('Error al descargar reporte: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en descargarReporteEquipo: $e');
      throw Exception('Error al descargar reporte del equipo: $e');
    }
  }

  /// Obtiene el directorio de descargas, creando la carpeta SMC si es necesario
  Future<Directory> _obtenerDirectorioDescargas() async {
    try {
      Directory downloadsDir;
      
      if (Platform.isAndroid) {
        // Para Android, usar el directorio de descargas est√°ndar
        downloadsDir = Directory('/storage/emulated/0/Download');
        if (!await downloadsDir.exists()) {
          // Fallback al directorio externo
          downloadsDir = await getExternalStorageDirectory() ?? await getApplicationDocumentsDirectory();
        }
      } else if (Platform.isIOS) {
        // Para iOS, usar el directorio de documentos
        downloadsDir = await getApplicationDocumentsDirectory();
      } else {
        // Para otras plataformas
        downloadsDir = await getApplicationDocumentsDirectory();
      }
      
      // Crear subdirectorio SMC
      final smcDir = Directory('${downloadsDir.path}/SMC');
      if (!await smcDir.exists()) {
        await smcDir.create(recursive: true);
        print('üìÅ Directorio SMC creado: ${smcDir.path}');
      }
      
      return smcDir;
    } catch (e) {
      print('‚ùå Error al obtener directorio de descargas: $e');
      // Fallback al directorio de documentos
      return await getApplicationDocumentsDirectory();
    }
  }

  /// Obtiene alertas del equipo
  Future<List<Map<String, dynamic>>> getAlertasEquipo() async {
    try {
      final url = '$baseUrl/api/supervisor/alertas-equipo';
      final headers = await _getHeaders();
      
      print('üö® Obteniendo alertas del equipo...');
      print('üîó URL: $url');

      final response = await http.get(
        Uri.parse(url),
        headers: headers,
      );

      print('üìå Respuesta alertas equipo - Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Alertas del equipo obtenidas exitosamente');
        return List<Map<String, dynamic>>.from(data);
      } else {
        throw Exception('Error al obtener alertas del equipo: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error en getAlertasEquipo: $e');
      throw Exception('Error al obtener alertas del equipo: $e');
    }
  }
}
